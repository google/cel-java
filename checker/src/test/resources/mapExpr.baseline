Source: x.repeated_int64.map(x, double(x))
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
__comprehension__(
  // Variable
  x,
  // Target
  x~cel.expr.conformance.proto3.TestAllTypes^x.repeated_int64~list(int),
  // Accumulator
  @result,
  // Init
  []~list(double),
  // LoopCondition
  true~bool,
  // LoopStep
  _+_(
    @result~list(double)^@result,
    [
      double(
        x~int^x
      )~double^int64_to_double
    ]~list(double)
  )~list(double)^add_list,
  // Result
  @result~list(double)^@result)~list(double)

Source: [].map(x, [].map(y, x in y && y in x))
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
ERROR: test_location:1:33: found no matching overload for '@in' applied to '(list(%elem0), %elem0)' (candidates: (%A7, list(%A7)),(%A8, map(%A8, %B9)))
 | [].map(x, [].map(y, x in y && y in x))
 | ................................^

Source: [{}.map(c,c,c)]+[{}.map(c,c,c)]
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
_+_(
  [
    __comprehension__(
      // Variable
      c,
      // Target
      {}~map(bool, dyn),
      // Accumulator
      @result,
      // Init
      []~list(bool),
      // LoopCondition
      true~bool,
      // LoopStep
      _?_:_(
        c~bool^c,
        _+_(
          @result~list(bool)^@result,
          [
            c~bool^c
          ]~list(bool)
        )~list(bool)^add_list,
        @result~list(bool)^@result
      )~list(bool)^conditional,
      // Result
      @result~list(bool)^@result)~list(bool)
  ]~list(list(bool)),
  [
    __comprehension__(
      // Variable
      c,
      // Target
      {}~map(bool, dyn),
      // Accumulator
      @result,
      // Init
      []~list(bool),
      // LoopCondition
      true~bool,
      // LoopStep
      _?_:_(
        c~bool^c,
        _+_(
          @result~list(bool)^@result,
          [
            c~bool^c
          ]~list(bool)
        )~list(bool)^add_list,
        @result~list(bool)^@result
      )~list(bool)^conditional,
      // Result
      @result~list(bool)^@result)~list(bool)
  ]~list(list(bool))
)~list(list(bool))^add_list