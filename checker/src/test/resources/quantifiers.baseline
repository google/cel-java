Source: x.repeated_int64.all(e, e > 0) && x.repeated_int64.exists(e, e < 0) && x.repeated_int64.exists_one(e, e == 0)
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
_&&_(
  _&&_(
    __comprehension__(
      // Variable
      e,
      // Target
      x~cel.expr.conformance.proto3.TestAllTypes^x.repeated_int64~list(int),
      // Accumulator
      @result,
      // Init
      true~bool,
      // LoopCondition
      @not_strictly_false(
        @result~bool^@result
      )~bool^not_strictly_false,
      // LoopStep
      _&&_(
        @result~bool^@result,
        _>_(
          e~int^e,
          0~int
        )~bool^greater_int64
      )~bool^logical_and,
      // Result
      @result~bool^@result)~bool,
    __comprehension__(
      // Variable
      e,
      // Target
      x~cel.expr.conformance.proto3.TestAllTypes^x.repeated_int64~list(int),
      // Accumulator
      @result,
      // Init
      false~bool,
      // LoopCondition
      @not_strictly_false(
        !_(
          @result~bool^@result
        )~bool^logical_not
      )~bool^not_strictly_false,
      // LoopStep
      _||_(
        @result~bool^@result,
        _<_(
          e~int^e,
          0~int
        )~bool^less_int64
      )~bool^logical_or,
      // Result
      @result~bool^@result)~bool
  )~bool^logical_and,
  __comprehension__(
    // Variable
    e,
    // Target
    x~cel.expr.conformance.proto3.TestAllTypes^x.repeated_int64~list(int),
    // Accumulator
    @result,
    // Init
    0~int,
    // LoopCondition
    true~bool,
    // LoopStep
    _?_:_(
      _==_(
        e~int^e,
        0~int
      )~bool^equals,
      _+_(
        @result~int^@result,
        1~int
      )~int^add_int64,
      @result~int^@result
    )~int^conditional,
    // Result
    _==_(
      @result~int^@result,
      1~int
    )~bool^equals)~bool
)~bool^logical_and