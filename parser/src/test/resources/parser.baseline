I: x * 2
=====>
P: _*_(
  x^#1:Expr.Ident#,
  2^#3:int64#
)^#2:Expr.Call#
L: _*_(
  x^#1[1,0]#,
  2^#3[1,4]#
)^#2[1,2]#

I: x * 2u
=====>
P: _*_(
  x^#1:Expr.Ident#,
  2u^#3:uint64#
)^#2:Expr.Call#
L: _*_(
  x^#1[1,0]#,
  2u^#3[1,4]#
)^#2[1,2]#

I: x * 2.0
=====>
P: _*_(
  x^#1:Expr.Ident#,
  2.0^#3:double#
)^#2:Expr.Call#
L: _*_(
  x^#1[1,0]#,
  2.0^#3[1,4]#
)^#2[1,2]#

I: "\u2764"
=====>
P: "❤"^#1:string#
L: "❤"^#1[1,0]#

I: "❤"
=====>
P: "❤"^#1:string#
L: "❤"^#1[1,0]#

I: ! false
=====>
P: !_(
  false^#2:bool#
)^#1:Expr.Call#
L: !_(
  false^#2[1,2]#
)^#1[1,0]#

I: -a
=====>
P: -_(
  a^#2:Expr.Ident#
)^#1:Expr.Call#
L: -_(
  a^#2[1,1]#
)^#1[1,0]#

I: a.b(5)
=====>
P: a^#1:Expr.Ident#.b(
  5^#3:int64#
)^#2:Expr.Call#
L: a^#1[1,0]#.b(
  5^#3[1,4]#
)^#2[1,3]#

I: a[3]
=====>
P: _[_](
  a^#1:Expr.Ident#,
  3^#3:int64#
)^#2:Expr.Call#
L: _[_](
  a^#1[1,0]#,
  3^#3[1,2]#
)^#2[1,1]#

I: SomeMessage{foo: 5, bar: "xyz"}
=====>
P: SomeMessage{
  foo:5^#3:int64#^#2:Expr.CreateStruct.Entry#,
  bar:"xyz"^#5:string#^#4:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: SomeMessage{
  foo:5^#3[1,17]#^#2[1,15]#,
  bar:"xyz"^#5[1,25]#^#4[1,23]#
}^#1[1,11]#

I: [3, 4, 5]
=====>
P: [
  3^#2:int64#,
  4^#3:int64#,
  5^#4:int64#
]^#1:Expr.CreateList#
L: [
  3^#2[1,1]#,
  4^#3[1,4]#,
  5^#4[1,7]#
]^#1[1,0]#

I: {foo: 5, bar: "xyz"}
=====>
P: {
  foo^#3:Expr.Ident#:5^#4:int64#^#2:Expr.CreateStruct.Entry#,
  bar^#6:Expr.Ident#:"xyz"^#7:string#^#5:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: {
  foo^#3[1,1]#:5^#4[1,6]#^#2[1,4]#,
  bar^#6[1,9]#:"xyz"^#7[1,14]#^#5[1,12]#
}^#1[1,0]#

I: a > 5 && a < 10
=====>
P: _&&_(
  _>_(
    a^#1:Expr.Ident#,
    5^#3:int64#
  )^#2:Expr.Call#,
  _<_(
    a^#5:Expr.Ident#,
    10^#7:int64#
  )^#6:Expr.Call#
)^#4:Expr.Call#
L: _&&_(
  _>_(
    a^#1[1,0]#,
    5^#3[1,4]#
  )^#2[1,2]#,
  _<_(
    a^#5[1,9]#,
    10^#7[1,13]#
  )^#6[1,11]#
)^#4[1,6]#

I: a < 5 || a > 10
=====>
P: _||_(
  _<_(
    a^#1:Expr.Ident#,
    5^#3:int64#
  )^#2:Expr.Call#,
  _>_(
    a^#5:Expr.Ident#,
    10^#7:int64#
  )^#6:Expr.Call#
)^#4:Expr.Call#
L: _||_(
  _<_(
    a^#1[1,0]#,
    5^#3[1,4]#
  )^#2[1,2]#,
  _>_(
    a^#5[1,9]#,
    10^#7[1,13]#
  )^#6[1,11]#
)^#4[1,6]#

I: "abc" + "def"
=====>
P: _+_(
  "abc"^#1:string#,
  "def"^#3:string#
)^#2:Expr.Call#
L: _+_(
  "abc"^#1[1,0]#,
  "def"^#3[1,8]#
)^#2[1,6]#

I: "A"
=====>
P: "A"^#1:string#
L: "A"^#1[1,0]#

I: true
=====>
P: true^#1:bool#
L: true^#1[1,0]#

I: false
=====>
P: false^#1:bool#
L: false^#1[1,0]#

I: 0
=====>
P: 0^#1:int64#
L: 0^#1[1,0]#

I: 42
=====>
P: 42^#1:int64#
L: 42^#1[1,0]#

I: 0u
=====>
P: 0u^#1:uint64#
L: 0u^#1[1,0]#

I: 23u
=====>
P: 23u^#1:uint64#
L: 23u^#1[1,0]#

I: 24u
=====>
P: 24u^#1:uint64#
L: 24u^#1[1,0]#

I: 0xAu
=====>
P: 10u^#1:uint64#
L: 10u^#1[1,0]#

I: -0xA
=====>
P: -10^#1:int64#
L: -10^#1[1,1]#

I: 0xA
=====>
P: 10^#1:int64#
L: 10^#1[1,0]#

I: -1
=====>
P: -1^#1:int64#
L: -1^#1[1,1]#

I: 4--4
=====>
P: _-_(
  4^#1:int64#,
  -4^#3:int64#
)^#2:Expr.Call#
L: _-_(
  4^#1[1,0]#,
  -4^#3[1,3]#
)^#2[1,1]#

I: 4--4.1
=====>
P: _-_(
  4^#1:int64#,
  -4.1^#3:double#
)^#2:Expr.Call#
L: _-_(
  4^#1[1,0]#,
  -4.1^#3[1,3]#
)^#2[1,1]#

I: b"abc"
=====>
P: b"abc"^#1:bytes#
L: b"abc"^#1[1,0]#

I: 23.39
=====>
P: 23.39^#1:double#
L: 23.39^#1[1,0]#

I: !a
=====>
P: !_(
  a^#2:Expr.Ident#
)^#1:Expr.Call#
L: !_(
  a^#2[1,1]#
)^#1[1,0]#

I: null
=====>
P: null^#1:NullValue#
L: null^#1[1,0]#

I: a
=====>
P: a^#1:Expr.Ident#
L: a^#1[1,0]#

I: a?b:c
=====>
P: _?_:_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#,
  c^#4:Expr.Ident#
)^#2:Expr.Call#
L: _?_:_(
  a^#1[1,0]#,
  b^#3[1,2]#,
  c^#4[1,4]#
)^#2[1,1]#

I: a || b
=====>
P: _||_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _||_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a || b || c || d || e || f
=====>
P: _||_(
  _||_(
    _||_(
      a^#1:Expr.Ident#,
      b^#3:Expr.Ident#
    )^#2:Expr.Call#,
    c^#5:Expr.Ident#
  )^#4:Expr.Call#,
  _||_(
    _||_(
      d^#7:Expr.Ident#,
      e^#9:Expr.Ident#
    )^#8:Expr.Call#,
    f^#11:Expr.Ident#
  )^#10:Expr.Call#
)^#6:Expr.Call#
L: _||_(
  _||_(
    _||_(
      a^#1[1,0]#,
      b^#3[1,5]#
    )^#2[1,2]#,
    c^#5[1,10]#
  )^#4[1,7]#,
  _||_(
    _||_(
      d^#7[1,15]#,
      e^#9[1,20]#
    )^#8[1,17]#,
    f^#11[1,25]#
  )^#10[1,22]#
)^#6[1,12]#

I: a && b
=====>
P: _&&_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _&&_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a && b && c && d && e && f && g
=====>
P: _&&_(
  _&&_(
    _&&_(
      a^#1:Expr.Ident#,
      b^#3:Expr.Ident#
    )^#2:Expr.Call#,
    _&&_(
      c^#5:Expr.Ident#,
      d^#7:Expr.Ident#
    )^#6:Expr.Call#
  )^#4:Expr.Call#,
  _&&_(
    _&&_(
      e^#9:Expr.Ident#,
      f^#11:Expr.Ident#
    )^#10:Expr.Call#,
    g^#13:Expr.Ident#
  )^#12:Expr.Call#
)^#8:Expr.Call#
L: _&&_(
  _&&_(
    _&&_(
      a^#1[1,0]#,
      b^#3[1,5]#
    )^#2[1,2]#,
    _&&_(
      c^#5[1,10]#,
      d^#7[1,15]#
    )^#6[1,12]#
  )^#4[1,7]#,
  _&&_(
    _&&_(
      e^#9[1,20]#,
      f^#11[1,25]#
    )^#10[1,22]#,
    g^#13[1,30]#
  )^#12[1,27]#
)^#8[1,17]#

I: a && b && c && d || e && f && g && h
=====>
P: _||_(
  _&&_(
    _&&_(
      a^#1:Expr.Ident#,
      b^#3:Expr.Ident#
    )^#2:Expr.Call#,
    _&&_(
      c^#5:Expr.Ident#,
      d^#7:Expr.Ident#
    )^#6:Expr.Call#
  )^#4:Expr.Call#,
  _&&_(
    _&&_(
      e^#9:Expr.Ident#,
      f^#11:Expr.Ident#
    )^#10:Expr.Call#,
    _&&_(
      g^#13:Expr.Ident#,
      h^#15:Expr.Ident#
    )^#14:Expr.Call#
  )^#12:Expr.Call#
)^#8:Expr.Call#
L: _||_(
  _&&_(
    _&&_(
      a^#1[1,0]#,
      b^#3[1,5]#
    )^#2[1,2]#,
    _&&_(
      c^#5[1,10]#,
      d^#7[1,15]#
    )^#6[1,12]#
  )^#4[1,7]#,
  _&&_(
    _&&_(
      e^#9[1,20]#,
      f^#11[1,25]#
    )^#10[1,22]#,
    _&&_(
      g^#13[1,30]#,
      h^#15[1,35]#
    )^#14[1,32]#
  )^#12[1,27]#
)^#8[1,17]#

I: a + b
=====>
P: _+_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _+_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a - b
=====>
P: _-_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _-_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a * b
=====>
P: _*_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _*_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a / b
=====>
P: _/_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _/_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a % b
=====>
P: _%_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _%_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a in b
=====>
P: @in(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: @in(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a == b
=====>
P: _==_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _==_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a != b
=====>
P: _!=_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _!=_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a > b
=====>
P: _>_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _>_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a >= b
=====>
P: _>=_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _>=_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a < b
=====>
P: _<_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _<_(
  a^#1[1,0]#,
  b^#3[1,4]#
)^#2[1,2]#

I: a <= b
=====>
P: _<=_(
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _<=_(
  a^#1[1,0]#,
  b^#3[1,5]#
)^#2[1,2]#

I: a.b
=====>
P: a^#1:Expr.Ident#.b^#2:Expr.Select#
L: a^#1[1,0]#.b^#2[1,1]#

I: a.b.c
=====>
P: a^#1:Expr.Ident#.b^#2:Expr.Select#.c^#3:Expr.Select#
L: a^#1[1,0]#.b^#2[1,1]#.c^#3[1,3]#

I: a[b]
=====>
P: _[_](
  a^#1:Expr.Ident#,
  b^#3:Expr.Ident#
)^#2:Expr.Call#
L: _[_](
  a^#1[1,0]#,
  b^#3[1,2]#
)^#2[1,1]#

I: foo{ }
=====>
P: foo{}^#1:Expr.CreateStruct#
L: foo{}^#1[1,3]#

I: foo{ a:b }
=====>
P: foo{
  a:b^#3:Expr.Ident#^#2:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: foo{
  a:b^#3[1,7]#^#2[1,6]#
}^#1[1,3]#

I: foo{ a:b, c:d }
=====>
P: foo{
  a:b^#3:Expr.Ident#^#2:Expr.CreateStruct.Entry#,
  c:d^#5:Expr.Ident#^#4:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: foo{
  a:b^#3[1,7]#^#2[1,6]#,
  c:d^#5[1,12]#^#4[1,11]#
}^#1[1,3]#

I: {}
=====>
P: {}^#1:Expr.CreateStruct#
L: {}^#1[1,0]#

I: {a:b, c:d}
=====>
P: {
  a^#3:Expr.Ident#:b^#4:Expr.Ident#^#2:Expr.CreateStruct.Entry#,
  c^#6:Expr.Ident#:d^#7:Expr.Ident#^#5:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: {
  a^#3[1,1]#:b^#4[1,3]#^#2[1,2]#,
  c^#6[1,6]#:d^#7[1,8]#^#5[1,7]#
}^#1[1,0]#

I: []
=====>
P: []^#1:Expr.CreateList#
L: []^#1[1,0]#

I: [a]
=====>
P: [
  a^#2:Expr.Ident#
]^#1:Expr.CreateList#
L: [
  a^#2[1,1]#
]^#1[1,0]#

I: [a, b, c]
=====>
P: [
  a^#2:Expr.Ident#,
  b^#3:Expr.Ident#,
  c^#4:Expr.Ident#
]^#1:Expr.CreateList#
L: [
  a^#2[1,1]#,
  b^#3[1,4]#,
  c^#4[1,7]#
]^#1[1,0]#

I: (a)
=====>
P: a^#1:Expr.Ident#
L: a^#1[1,1]#

I: ((a))
=====>
P: a^#1:Expr.Ident#
L: a^#1[1,2]#

I: a()
=====>
P: a()^#1:Expr.Call#
L: a()^#1[1,1]#

I: a(b)
=====>
P: a(
  b^#2:Expr.Ident#
)^#1:Expr.Call#
L: a(
  b^#2[1,2]#
)^#1[1,1]#

I: a(b, c)
=====>
P: a(
  b^#2:Expr.Ident#,
  c^#3:Expr.Ident#
)^#1:Expr.Call#
L: a(
  b^#2[1,2]#,
  c^#3[1,5]#
)^#1[1,1]#

I: a.b()
=====>
P: a^#1:Expr.Ident#.b()^#2:Expr.Call#
L: a^#1[1,0]#.b()^#2[1,3]#

I: a.b(c)
=====>
P: a^#1:Expr.Ident#.b(
  c^#3:Expr.Ident#
)^#2:Expr.Call#
L: a^#1[1,0]#.b(
  c^#3[1,4]#
)^#2[1,3]#

I: aaa.bbb(ccc)
=====>
P: aaa^#1:Expr.Ident#.bbb(
  ccc^#3:Expr.Ident#
)^#2:Expr.Call#
L: aaa^#1[1,0]#.bbb(
  ccc^#3[1,8]#
)^#2[1,7]#

I: has(m.f)
=====>
P: m^#2:Expr.Ident#.f~test-only~^#4:Expr.Select#
L: m^#2[1,4]#.f~test-only~^#4[1,3]#
M: has(
  m^#2:Expr.Ident#.f^#3:Expr.Select#
)^#0:Expr.Call#

I: m.exists_one(v, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  0^#5:int64#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _?_:_(
    f^#4:Expr.Ident#,
    _+_(
      @result^#7:Expr.Ident#,
      1^#8:int64#
    )^#9:Expr.Call#,
    @result^#10:Expr.Ident#
  )^#11:Expr.Call#,
  // Result
  _==_(
    @result^#12:Expr.Ident#,
    1^#13:int64#
  )^#14:Expr.Call#)^#15:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  0^#5[1,12]#,
  // LoopCondition
  true^#6[1,12]#,
  // LoopStep
  _?_:_(
    f^#4[1,16]#,
    _+_(
      @result^#7[1,12]#,
      1^#8[1,12]#
    )^#9[1,12]#,
    @result^#10[1,12]#
  )^#11[1,12]#,
  // Result
  _==_(
    @result^#12[1,12]#,
    1^#13[1,12]#
  )^#14[1,12]#)^#15[1,12]#
M: m^#1:Expr.Ident#.exists_one(
  v^#3:Expr.Ident#,
  f^#4:Expr.Ident#
)^#0:Expr.Call#

I: m.map(v, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  []^#5:Expr.CreateList#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _+_(
    @result^#7:Expr.Ident#,
    [
      f^#4:Expr.Ident#
    ]^#8:Expr.CreateList#
  )^#9:Expr.Call#,
  // Result
  @result^#10:Expr.Ident#)^#11:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  []^#5[1,5]#,
  // LoopCondition
  true^#6[1,5]#,
  // LoopStep
  _+_(
    @result^#7[1,5]#,
    [
      f^#4[1,9]#
    ]^#8[1,5]#
  )^#9[1,5]#,
  // Result
  @result^#10[1,5]#)^#11[1,5]#
M: m^#1:Expr.Ident#.map(
  v^#3:Expr.Ident#,
  f^#4:Expr.Ident#
)^#0:Expr.Call#

I: m.map(v, p, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  []^#6:Expr.CreateList#,
  // LoopCondition
  true^#7:bool#,
  // LoopStep
  _?_:_(
    p^#4:Expr.Ident#,
    _+_(
      @result^#8:Expr.Ident#,
      [
        f^#5:Expr.Ident#
      ]^#9:Expr.CreateList#
    )^#10:Expr.Call#,
    @result^#11:Expr.Ident#
  )^#12:Expr.Call#,
  // Result
  @result^#13:Expr.Ident#)^#14:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  []^#6[1,5]#,
  // LoopCondition
  true^#7[1,5]#,
  // LoopStep
  _?_:_(
    p^#4[1,9]#,
    _+_(
      @result^#8[1,5]#,
      [
        f^#5[1,12]#
      ]^#9[1,5]#
    )^#10[1,5]#,
    @result^#11[1,5]#
  )^#12[1,5]#,
  // Result
  @result^#13[1,5]#)^#14[1,5]#
M: m^#1:Expr.Ident#.map(
  v^#3:Expr.Ident#,
  p^#4:Expr.Ident#,
  f^#5:Expr.Ident#
)^#0:Expr.Call#

I: m.filter(v, p)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  []^#5:Expr.CreateList#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _?_:_(
    p^#4:Expr.Ident#,
    _+_(
      @result^#7:Expr.Ident#,
      [
        v^#3:Expr.Ident#
      ]^#8:Expr.CreateList#
    )^#9:Expr.Call#,
    @result^#10:Expr.Ident#
  )^#11:Expr.Call#,
  // Result
  @result^#12:Expr.Ident#)^#13:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  []^#5[1,8]#,
  // LoopCondition
  true^#6[1,8]#,
  // LoopStep
  _?_:_(
    p^#4[1,12]#,
    _+_(
      @result^#7[1,8]#,
      [
        v^#3[1,9]#
      ]^#8[1,8]#
    )^#9[1,8]#,
    @result^#10[1,8]#
  )^#11[1,8]#,
  // Result
  @result^#12[1,8]#)^#13[1,8]#
M: m^#1:Expr.Ident#.filter(
  v^#3:Expr.Ident#,
  p^#4:Expr.Ident#
)^#0:Expr.Call#

I: [] + [1,2,3,] + [4]
=====>
P: _+_(
  _+_(
    []^#1:Expr.CreateList#,
    [
      1^#4:int64#,
      2^#5:int64#,
      3^#6:int64#
    ]^#3:Expr.CreateList#
  )^#2:Expr.Call#,
  [
    4^#9:int64#
  ]^#8:Expr.CreateList#
)^#7:Expr.Call#
L: _+_(
  _+_(
    []^#1[1,0]#,
    [
      1^#4[1,6]#,
      2^#5[1,8]#,
      3^#6[1,10]#
    ]^#3[1,5]#
  )^#2[1,3]#,
  [
    4^#9[1,17]#
  ]^#8[1,16]#
)^#7[1,14]#

I: {1:2u, 2:3u}
=====>
P: {
  1^#3:int64#:2u^#4:uint64#^#2:Expr.CreateStruct.Entry#,
  2^#6:int64#:3u^#7:uint64#^#5:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: {
  1^#3[1,1]#:2u^#4[1,3]#^#2[1,2]#,
  2^#6[1,7]#:3u^#7[1,9]#^#5[1,8]#
}^#1[1,0]#

I: TestAllTypes{single_int32: 1, single_int64: 2}
=====>
P: TestAllTypes{
  single_int32:1^#3:int64#^#2:Expr.CreateStruct.Entry#,
  single_int64:2^#5:int64#^#4:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: TestAllTypes{
  single_int32:1^#3[1,27]#^#2[1,25]#,
  single_int64:2^#5[1,44]#^#4[1,42]#
}^#1[1,12]#

I: size(x) == x.size()
=====>
P: _==_(
  size(
    x^#2:Expr.Ident#
  )^#1:Expr.Call#,
  x^#4:Expr.Ident#.size()^#5:Expr.Call#
)^#3:Expr.Call#
L: _==_(
  size(
    x^#2[1,5]#
  )^#1[1,4]#,
  x^#4[1,11]#.size()^#5[1,17]#
)^#3[1,8]#

I: "\""
=====>
P: "\""^#1:string#
L: "\""^#1[1,0]#

I: [1,3,4][0]
=====>
P: _[_](
  [
    1^#2:int64#,
    3^#3:int64#,
    4^#4:int64#
  ]^#1:Expr.CreateList#,
  0^#6:int64#
)^#5:Expr.Call#
L: _[_](
  [
    1^#2[1,1]#,
    3^#3[1,3]#,
    4^#4[1,5]#
  ]^#1[1,0]#,
  0^#6[1,8]#
)^#5[1,7]#

I: x["a"].single_int32 == 23
=====>
P: _==_(
  _[_](
    x^#1:Expr.Ident#,
    "a"^#3:string#
  )^#2:Expr.Call#.single_int32^#4:Expr.Select#,
  23^#6:int64#
)^#5:Expr.Call#
L: _==_(
  _[_](
    x^#1[1,0]#,
    "a"^#3[1,2]#
  )^#2[1,1]#.single_int32^#4[1,6]#,
  23^#6[1,23]#
)^#5[1,20]#

I: x.single_nested_message != null
=====>
P: _!=_(
  x^#1:Expr.Ident#.single_nested_message^#2:Expr.Select#,
  null^#4:NullValue#
)^#3:Expr.Call#
L: _!=_(
  x^#1[1,0]#.single_nested_message^#2[1,1]#,
  null^#4[1,27]#
)^#3[1,24]#

I: false && !true || false ? 2 : 3
=====>
P: _?_:_(
  _||_(
    _&&_(
      false^#1:bool#,
      !_(
        true^#4:bool#
      )^#3:Expr.Call#
    )^#2:Expr.Call#,
    false^#6:bool#
  )^#5:Expr.Call#,
  2^#8:int64#,
  3^#9:int64#
)^#7:Expr.Call#
L: _?_:_(
  _||_(
    _&&_(
      false^#1[1,0]#,
      !_(
        true^#4[1,10]#
      )^#3[1,9]#
    )^#2[1,6]#,
    false^#6[1,18]#
  )^#5[1,15]#,
  2^#8[1,26]#,
  3^#9[1,30]#
)^#7[1,24]#

I: b"abc" + B"def"
=====>
P: _+_(
  b"abc"^#1:bytes#,
  b"def"^#3:bytes#
)^#2:Expr.Call#
L: _+_(
  b"abc"^#1[1,0]#,
  b"def"^#3[1,9]#
)^#2[1,7]#

I: 1 + 2 * 3 - 1 / 2 == 6 % 1
=====>
P: _==_(
  _-_(
    _+_(
      1^#1:int64#,
      _*_(
        2^#3:int64#,
        3^#5:int64#
      )^#4:Expr.Call#
    )^#2:Expr.Call#,
    _/_(
      1^#7:int64#,
      2^#9:int64#
    )^#8:Expr.Call#
  )^#6:Expr.Call#,
  _%_(
    6^#11:int64#,
    1^#13:int64#
  )^#12:Expr.Call#
)^#10:Expr.Call#
L: _==_(
  _-_(
    _+_(
      1^#1[1,0]#,
      _*_(
        2^#3[1,4]#,
        3^#5[1,8]#
      )^#4[1,6]#
    )^#2[1,2]#,
    _/_(
      1^#7[1,12]#,
      2^#9[1,16]#
    )^#8[1,14]#
  )^#6[1,10]#,
  _%_(
    6^#11[1,21]#,
    1^#13[1,25]#
  )^#12[1,23]#
)^#10[1,18]#

I: ---a
=====>
P: -_(
  a^#2:Expr.Ident#
)^#1:Expr.Call#
L: -_(
  a^#2[1,3]#
)^#1[1,0]#

I: "\xC3\XBF"
=====>
P: "Ã¿"^#1:string#
L: "Ã¿"^#1[1,0]#

I: "\303\277"
=====>
P: "Ã¿"^#1:string#
L: "Ã¿"^#1[1,0]#

I: "hi\u263A \u263Athere"
=====>
P: "hi☺ ☺there"^#1:string#
L: "hi☺ ☺there"^#1[1,0]#

I: "\U000003A8\?"
=====>
P: "Ψ?"^#1:string#
L: "Ψ?"^#1[1,0]#

I: "\a\b\f\n\r\t\v'\"\\\? Legal escapes"
=====>
P: "\a\b\f\n\r\t\v'\"\? Legal escapes"^#1:string#
L: "\a\b\f\n\r\t\v'\"\? Legal escapes"^#1[1,0]#

I: '😁' in ['😁', '😑', '😦']
=====>
P: @in(
  "😁"^#1:string#,
  [
    "😁"^#4:string#,
    "😑"^#5:string#,
    "😦"^#6:string#
  ]^#3:Expr.CreateList#
)^#2:Expr.Call#
L: @in(
  "😁"^#1[1,0]#,
  [
    "😁"^#4[1,8]#,
    "😑"^#5[1,13]#,
    "😦"^#6[1,18]#
  ]^#3[1,7]#
)^#2[1,4]#

I: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[['just fine'],[1],[2],[3],[4],[5]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
=====>

I: x.filter(y, y.filter(z, z > 0))
=====>
P: __comprehension__(
  // Variable
  y,
  // Target
  x^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  []^#19:Expr.CreateList#,
  // LoopCondition
  true^#20:bool#,
  // LoopStep
  _?_:_(
    __comprehension__(
      // Variable
      z,
      // Target
      y^#4:Expr.Ident#,
      // Accumulator
      @result,
      // Init
      []^#10:Expr.CreateList#,
      // LoopCondition
      true^#11:bool#,
      // LoopStep
      _?_:_(
        _>_(
          z^#7:Expr.Ident#,
          0^#9:int64#
        )^#8:Expr.Call#,
        _+_(
          @result^#12:Expr.Ident#,
          [
            z^#6:Expr.Ident#
          ]^#13:Expr.CreateList#
        )^#14:Expr.Call#,
        @result^#15:Expr.Ident#
      )^#16:Expr.Call#,
      // Result
      @result^#17:Expr.Ident#)^#18:Expr.Comprehension#,
    _+_(
      @result^#21:Expr.Ident#,
      [
        y^#3:Expr.Ident#
      ]^#22:Expr.CreateList#
    )^#23:Expr.Call#,
    @result^#24:Expr.Ident#
  )^#25:Expr.Call#,
  // Result
  @result^#26:Expr.Ident#)^#27:Expr.Comprehension#
L: __comprehension__(
  // Variable
  y,
  // Target
  x^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  []^#19[1,8]#,
  // LoopCondition
  true^#20[1,8]#,
  // LoopStep
  _?_:_(
    __comprehension__(
      // Variable
      z,
      // Target
      y^#4[1,12]#,
      // Accumulator
      @result,
      // Init
      []^#10[1,20]#,
      // LoopCondition
      true^#11[1,20]#,
      // LoopStep
      _?_:_(
        _>_(
          z^#7[1,24]#,
          0^#9[1,28]#
        )^#8[1,26]#,
        _+_(
          @result^#12[1,20]#,
          [
            z^#6[1,21]#
          ]^#13[1,20]#
        )^#14[1,20]#,
        @result^#15[1,20]#
      )^#16[1,20]#,
      // Result
      @result^#17[1,20]#)^#18[1,20]#,
    _+_(
      @result^#21[1,8]#,
      [
        y^#3[1,9]#
      ]^#22[1,8]#
    )^#23[1,8]#,
    @result^#24[1,8]#
  )^#25[1,8]#,
  // Result
  @result^#26[1,8]#)^#27[1,8]#
M: x^#1:Expr.Ident#.filter(
  y^#3:Expr.Ident#,
  ^#18:filter#
)^#0:Expr.Call#,
y^#4:Expr.Ident#.filter(
  z^#6:Expr.Ident#,
  _>_(
    z^#7:Expr.Ident#,
    0^#9:int64#
  )^#8:Expr.Call#
)^#0:Expr.Call#

I: has(a.b).filter(c, c)
=====>
P: __comprehension__(
  // Variable
  c,
  // Target
  a^#2:Expr.Ident#.b~test-only~^#4:Expr.Select#,
  // Accumulator
  @result,
  // Init
  []^#8:Expr.CreateList#,
  // LoopCondition
  true^#9:bool#,
  // LoopStep
  _?_:_(
    c^#7:Expr.Ident#,
    _+_(
      @result^#10:Expr.Ident#,
      [
        c^#6:Expr.Ident#
      ]^#11:Expr.CreateList#
    )^#12:Expr.Call#,
    @result^#13:Expr.Ident#
  )^#14:Expr.Call#,
  // Result
  @result^#15:Expr.Ident#)^#16:Expr.Comprehension#
L: __comprehension__(
  // Variable
  c,
  // Target
  a^#2[1,4]#.b~test-only~^#4[1,3]#,
  // Accumulator
  @result,
  // Init
  []^#8[1,15]#,
  // LoopCondition
  true^#9[1,15]#,
  // LoopStep
  _?_:_(
    c^#7[1,19]#,
    _+_(
      @result^#10[1,15]#,
      [
        c^#6[1,16]#
      ]^#11[1,15]#
    )^#12[1,15]#,
    @result^#13[1,15]#
  )^#14[1,15]#,
  // Result
  @result^#15[1,15]#)^#16[1,15]#
M: ^#4:has#.filter(
  c^#6:Expr.Ident#,
  c^#7:Expr.Ident#
)^#0:Expr.Call#,
has(
  a^#2:Expr.Ident#.b^#3:Expr.Select#
)^#0:Expr.Call#

I: x.filter(y, y.exists(z, has(z.a)) && y.exists(z, has(z.b)))
=====>
P: __comprehension__(
  // Variable
  y,
  // Target
  x^#1:Expr.Ident#,
  // Accumulator
  @result,
  // Init
  []^#35:Expr.CreateList#,
  // LoopCondition
  true^#36:bool#,
  // LoopStep
  _?_:_(
    _&&_(
      __comprehension__(
        // Variable
        z,
        // Target
        y^#4:Expr.Ident#,
        // Accumulator
        @result,
        // Init
        false^#11:bool#,
        // LoopCondition
        @not_strictly_false(
          !_(
            @result^#12:Expr.Ident#
          )^#13:Expr.Call#
        )^#14:Expr.Call#,
        // LoopStep
        _||_(
          @result^#15:Expr.Ident#,
          z^#8:Expr.Ident#.a~test-only~^#10:Expr.Select#
        )^#16:Expr.Call#,
        // Result
        @result^#17:Expr.Ident#)^#18:Expr.Comprehension#,
      __comprehension__(
        // Variable
        z,
        // Target
        y^#20:Expr.Ident#,
        // Accumulator
        @result,
        // Init
        false^#27:bool#,
        // LoopCondition
        @not_strictly_false(
          !_(
            @result^#28:Expr.Ident#
          )^#29:Expr.Call#
        )^#30:Expr.Call#,
        // LoopStep
        _||_(
          @result^#31:Expr.Ident#,
          z^#24:Expr.Ident#.b~test-only~^#26:Expr.Select#
        )^#32:Expr.Call#,
        // Result
        @result^#33:Expr.Ident#)^#34:Expr.Comprehension#
    )^#19:Expr.Call#,
    _+_(
      @result^#37:Expr.Ident#,
      [
        y^#3:Expr.Ident#
      ]^#38:Expr.CreateList#
    )^#39:Expr.Call#,
    @result^#40:Expr.Ident#
  )^#41:Expr.Call#,
  // Result
  @result^#42:Expr.Ident#)^#43:Expr.Comprehension#
L: __comprehension__(
  // Variable
  y,
  // Target
  x^#1[1,0]#,
  // Accumulator
  @result,
  // Init
  []^#35[1,8]#,
  // LoopCondition
  true^#36[1,8]#,
  // LoopStep
  _?_:_(
    _&&_(
      __comprehension__(
        // Variable
        z,
        // Target
        y^#4[1,12]#,
        // Accumulator
        @result,
        // Init
        false^#11[1,20]#,
        // LoopCondition
        @not_strictly_false(
          !_(
            @result^#12[1,20]#
          )^#13[1,20]#
        )^#14[1,20]#,
        // LoopStep
        _||_(
          @result^#15[1,20]#,
          z^#8[1,28]#.a~test-only~^#10[1,27]#
        )^#16[1,20]#,
        // Result
        @result^#17[1,20]#)^#18[1,20]#,
      __comprehension__(
        // Variable
        z,
        // Target
        y^#20[1,37]#,
        // Accumulator
        @result,
        // Init
        false^#27[1,45]#,
        // LoopCondition
        @not_strictly_false(
          !_(
            @result^#28[1,45]#
          )^#29[1,45]#
        )^#30[1,45]#,
        // LoopStep
        _||_(
          @result^#31[1,45]#,
          z^#24[1,53]#.b~test-only~^#26[1,52]#
        )^#32[1,45]#,
        // Result
        @result^#33[1,45]#)^#34[1,45]#
    )^#19[1,34]#,
    _+_(
      @result^#37[1,8]#,
      [
        y^#3[1,9]#
      ]^#38[1,8]#
    )^#39[1,8]#,
    @result^#40[1,8]#
  )^#41[1,8]#,
  // Result
  @result^#42[1,8]#)^#43[1,8]#
M: x^#1:Expr.Ident#.filter(
  y^#3:Expr.Ident#,
  _&&_(
    ^#18:exists#,
    ^#34:exists#
  )^#19:Expr.Call#
)^#0:Expr.Call#,
y^#20:Expr.Ident#.exists(
  z^#22:Expr.Ident#,
  ^#26:has#
)^#0:Expr.Call#,
has(
  z^#24:Expr.Ident#.b^#25:Expr.Select#
)^#0:Expr.Call#,
y^#4:Expr.Ident#.exists(
  z^#6:Expr.Ident#,
  ^#10:has#
)^#0:Expr.Call#,
has(
  z^#8:Expr.Ident#.a^#9:Expr.Select#
)^#0:Expr.Call#

I: noop_macro(123)
=====>
P: noop_macro(
  123^#2:int64#
)^#1:Expr.Call#
L: noop_macro(
  123^#2[1,11]#
)^#1[1,10]#

I: get_constant_macro()
=====>
P: 10^#1:int64#
L: 10^#1[NO_POS]#
M: get_constant_macro()^#0:Expr.Call#

I: a.?b[?0] && a[?c]
=====>
P: _&&_(
  _[?_](
    _?._(
      a^#1:Expr.Ident#,
      "b"^#3:string#
    )^#2:Expr.Call#,
    0^#5:int64#
  )^#4:Expr.Call#,
  _[?_](
    a^#7:Expr.Ident#,
    c^#9:Expr.Ident#
  )^#8:Expr.Call#
)^#6:Expr.Call#
L: _&&_(
  _[?_](
    _?._(
      a^#1[1,0]#,
      "b"^#3[1,0]#
    )^#2[1,1]#,
    0^#5[1,6]#
  )^#4[1,4]#,
  _[?_](
    a^#7[1,12]#,
    c^#9[1,15]#
  )^#8[1,13]#
)^#6[1,9]#

I: {?'key': value}
=====>
P: {
  ?"key"^#3:string#:value^#4:Expr.Ident#^#2:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: {
  ?"key"^#3[1,2]#:value^#4[1,9]#^#2[1,7]#
}^#1[1,0]#

I: Msg{?field: value}
=====>
P: Msg{
  ?field:value^#3:Expr.Ident#^#2:Expr.CreateStruct.Entry#
}^#1:Expr.CreateStruct#
L: Msg{
  ?field:value^#3[1,12]#^#2[1,10]#
}^#1[1,3]#

I: [?a, ?b]
=====>
P: [
  ?a^#2:Expr.Ident#,
  ?b^#3:Expr.Ident#
]^#1:Expr.CreateList#
L: [
  ?a^#2[1,2]#,
  ?b^#3[1,6]#
]^#1[1,0]#

I: [?a[?b]]
=====>
P: [
  ?_[?_](
    a^#2:Expr.Ident#,
    b^#4:Expr.Ident#
  )^#3:Expr.Call#
]^#1:Expr.CreateList#
L: [
  ?_[?_](
    a^#2[1,2]#,
    b^#4[1,5]#
  )^#3[1,3]#
]^#1[1,0]#

I: while
=====>
P: while^#1:Expr.Ident#
L: while^#1[1,0]#