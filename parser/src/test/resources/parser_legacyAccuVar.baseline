I: x * 2
=====>
P: _*_(
  x^#1:Expr.Ident#,
  2^#3:int64#
)^#2:Expr.Call#
L: _*_(
  x^#1[1,0]#,
  2^#3[1,4]#
)^#2[1,2]#

I: has(m.f)
=====>
P: m^#2:Expr.Ident#.f~test-only~^#4:Expr.Select#
L: m^#2[1,4]#.f~test-only~^#4[1,3]#
M: has(
  m^#2:Expr.Ident#.f^#3:Expr.Select#
)^#0:Expr.Call#

I: m.exists_one(v, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  __result__,
  // Init
  0^#5:int64#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _?_:_(
    f^#4:Expr.Ident#,
    _+_(
      __result__^#7:Expr.Ident#,
      1^#8:int64#
    )^#9:Expr.Call#,
    __result__^#10:Expr.Ident#
  )^#11:Expr.Call#,
  // Result
  _==_(
    __result__^#12:Expr.Ident#,
    1^#13:int64#
  )^#14:Expr.Call#)^#15:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  __result__,
  // Init
  0^#5[1,12]#,
  // LoopCondition
  true^#6[1,12]#,
  // LoopStep
  _?_:_(
    f^#4[1,16]#,
    _+_(
      __result__^#7[1,12]#,
      1^#8[1,12]#
    )^#9[1,12]#,
    __result__^#10[1,12]#
  )^#11[1,12]#,
  // Result
  _==_(
    __result__^#12[1,12]#,
    1^#13[1,12]#
  )^#14[1,12]#)^#15[1,12]#
M: m^#1:Expr.Ident#.exists_one(
  v^#3:Expr.Ident#,
  f^#4:Expr.Ident#
)^#0:Expr.Call#

I: m.all(v, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  __result__,
  // Init
  true^#5:bool#,
  // LoopCondition
  @not_strictly_false(
    __result__^#6:Expr.Ident#
  )^#7:Expr.Call#,
  // LoopStep
  _&&_(
    __result__^#8:Expr.Ident#,
    f^#4:Expr.Ident#
  )^#9:Expr.Call#,
  // Result
  __result__^#10:Expr.Ident#)^#11:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  __result__,
  // Init
  true^#5[1,5]#,
  // LoopCondition
  @not_strictly_false(
    __result__^#6[1,5]#
  )^#7[1,5]#,
  // LoopStep
  _&&_(
    __result__^#8[1,5]#,
    f^#4[1,9]#
  )^#9[1,5]#,
  // Result
  __result__^#10[1,5]#)^#11[1,5]#
M: m^#1:Expr.Ident#.all(
  v^#3:Expr.Ident#,
  f^#4:Expr.Ident#
)^#0:Expr.Call#

I: m.map(v, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  __result__,
  // Init
  []^#5:Expr.CreateList#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _+_(
    __result__^#7:Expr.Ident#,
    [
      f^#4:Expr.Ident#
    ]^#8:Expr.CreateList#
  )^#9:Expr.Call#,
  // Result
  __result__^#10:Expr.Ident#)^#11:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  __result__,
  // Init
  []^#5[1,5]#,
  // LoopCondition
  true^#6[1,5]#,
  // LoopStep
  _+_(
    __result__^#7[1,5]#,
    [
      f^#4[1,9]#
    ]^#8[1,5]#
  )^#9[1,5]#,
  // Result
  __result__^#10[1,5]#)^#11[1,5]#
M: m^#1:Expr.Ident#.map(
  v^#3:Expr.Ident#,
  f^#4:Expr.Ident#
)^#0:Expr.Call#

I: m.map(v, p, f)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  __result__,
  // Init
  []^#6:Expr.CreateList#,
  // LoopCondition
  true^#7:bool#,
  // LoopStep
  _?_:_(
    p^#4:Expr.Ident#,
    _+_(
      __result__^#8:Expr.Ident#,
      [
        f^#5:Expr.Ident#
      ]^#9:Expr.CreateList#
    )^#10:Expr.Call#,
    __result__^#11:Expr.Ident#
  )^#12:Expr.Call#,
  // Result
  __result__^#13:Expr.Ident#)^#14:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  __result__,
  // Init
  []^#6[1,5]#,
  // LoopCondition
  true^#7[1,5]#,
  // LoopStep
  _?_:_(
    p^#4[1,9]#,
    _+_(
      __result__^#8[1,5]#,
      [
        f^#5[1,12]#
      ]^#9[1,5]#
    )^#10[1,5]#,
    __result__^#11[1,5]#
  )^#12[1,5]#,
  // Result
  __result__^#13[1,5]#)^#14[1,5]#
M: m^#1:Expr.Ident#.map(
  v^#3:Expr.Ident#,
  p^#4:Expr.Ident#,
  f^#5:Expr.Ident#
)^#0:Expr.Call#

I: m.filter(v, p)
=====>
P: __comprehension__(
  // Variable
  v,
  // Target
  m^#1:Expr.Ident#,
  // Accumulator
  __result__,
  // Init
  []^#5:Expr.CreateList#,
  // LoopCondition
  true^#6:bool#,
  // LoopStep
  _?_:_(
    p^#4:Expr.Ident#,
    _+_(
      __result__^#7:Expr.Ident#,
      [
        v^#3:Expr.Ident#
      ]^#8:Expr.CreateList#
    )^#9:Expr.Call#,
    __result__^#10:Expr.Ident#
  )^#11:Expr.Call#,
  // Result
  __result__^#12:Expr.Ident#)^#13:Expr.Comprehension#
L: __comprehension__(
  // Variable
  v,
  // Target
  m^#1[1,0]#,
  // Accumulator
  __result__,
  // Init
  []^#5[1,8]#,
  // LoopCondition
  true^#6[1,8]#,
  // LoopStep
  _?_:_(
    p^#4[1,12]#,
    _+_(
      __result__^#7[1,8]#,
      [
        v^#3[1,9]#
      ]^#8[1,8]#
    )^#9[1,8]#,
    __result__^#10[1,8]#
  )^#11[1,8]#,
  // Result
  __result__^#12[1,8]#)^#13[1,8]#
M: m^#1:Expr.Ident#.filter(
  v^#3:Expr.Ident#,
  p^#4:Expr.Ident#
)^#0:Expr.Call#