Test case: SIZE_1
Source: size([1,2]) + size([1,2]) + 1 == 5
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: size
          args: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
              }
            }
          }
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [9] {
              function: _+_
              args: {
                IDENT [10] {
                  name: @index0
                }
                IDENT [11] {
                  name: @index0
                }
              }
            }
            CONSTANT [12] { value: 1 }
          }
        }
        CONSTANT [13] { value: 5 }
      }
    }
  }
}
Test case: SIZE_2
Source: 2 + size([1,2]) + size([1,2]) + 1 == 7
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: size
          args: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
              }
            }
          }
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [9] {
              function: _+_
              args: {
                CALL [10] {
                  function: _+_
                  args: {
                    CONSTANT [11] { value: 2 }
                    IDENT [12] {
                      name: @index0
                    }
                  }
                }
                IDENT [13] {
                  name: @index0
                }
              }
            }
            CONSTANT [14] { value: 1 }
          }
        }
        CONSTANT [15] { value: 7 }
      }
    }
  }
}
Test case: SIZE_3
Source: size([0]) + size([0]) + size([1,2]) + size([1,2]) == 6
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: size
          args: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 0 }
              }
            }
          }
        }
        CALL [6] {
          function: size
          args: {
            LIST [7] {
              elements: {
                CONSTANT [8] { value: 1 }
                CONSTANT [9] { value: 2 }
              }
            }
          }
        }
      }
    }
    CALL [10] {
      function: _==_
      args: {
        CALL [11] {
          function: _+_
          args: {
            CALL [12] {
              function: _+_
              args: {
                CALL [13] {
                  function: _+_
                  args: {
                    IDENT [14] {
                      name: @index0
                    }
                    IDENT [15] {
                      name: @index0
                    }
                  }
                }
                IDENT [16] {
                  name: @index1
                }
              }
            }
            IDENT [17] {
              name: @index1
            }
          }
        }
        CONSTANT [18] { value: 6 }
      }
    }
  }
}
Test case: SIZE_4
Source: 5 + size([0]) + size([0]) + size([1,2]) + size([1,2]) + size([1,2,3]) + size([1,2,3]) == 17
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: size
          args: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 0 }
              }
            }
          }
        }
        CALL [6] {
          function: size
          args: {
            LIST [7] {
              elements: {
                CONSTANT [8] { value: 1 }
                CONSTANT [9] { value: 2 }
              }
            }
          }
        }
        CALL [10] {
          function: size
          args: {
            LIST [11] {
              elements: {
                CONSTANT [12] { value: 1 }
                CONSTANT [13] { value: 2 }
                CONSTANT [14] { value: 3 }
              }
            }
          }
        }
        CALL [15] {
          function: _+_
          args: {
            CALL [16] {
              function: _+_
              args: {
                CALL [17] {
                  function: _+_
                  args: {
                    CALL [18] {
                      function: _+_
                      args: {
                        CALL [19] {
                          function: _+_
                          args: {
                            CALL [20] {
                              function: _+_
                              args: {
                                CONSTANT [21] { value: 5 }
                                IDENT [22] {
                                  name: @index0
                                }
                              }
                            }
                            IDENT [23] {
                              name: @index0
                            }
                          }
                        }
                        IDENT [24] {
                          name: @index1
                        }
                      }
                    }
                    IDENT [25] {
                      name: @index1
                    }
                  }
                }
                IDENT [26] {
                  name: @index2
                }
              }
            }
            IDENT [27] {
              name: @index2
            }
          }
        }
      }
    }
    CALL [28] {
      function: _==_
      args: {
        IDENT [29] {
          name: @index3
        }
        CONSTANT [30] { value: 17 }
      }
    }
  }
}
Test case: TIMESTAMP
Source: timestamp(int(timestamp(1000000000))).getFullYear() + timestamp(int(timestamp(75))).getFullYear() +  timestamp(int(timestamp(50))).getFullYear() +  timestamp(int(timestamp(1000000000))).getFullYear() +  timestamp(int(timestamp(50))).getSeconds() +  timestamp(int(timestamp(200))).getFullYear() +  timestamp(int(timestamp(200))).getFullYear() +  timestamp(int(timestamp(75))).getMinutes() +  timestamp(int(timestamp(1000000000))).getFullYear() == 13934
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: getFullYear
          target: {
            CALL [4] {
              function: timestamp
              args: {
                CALL [5] {
                  function: int
                  args: {
                    CALL [6] {
                      function: timestamp
                      args: {
                        CONSTANT [7] { value: 1000000000 }
                      }
                    }
                  }
                }
              }
            }
          }
          args: {
          }
        }
        CALL [8] {
          function: getFullYear
          target: {
            CALL [9] {
              function: timestamp
              args: {
                CALL [10] {
                  function: int
                  args: {
                    CALL [11] {
                      function: timestamp
                      args: {
                        CONSTANT [12] { value: 200 }
                      }
                    }
                  }
                }
              }
            }
          }
          args: {
          }
        }
        CALL [13] {
          function: timestamp
          args: {
            CALL [14] {
              function: int
              args: {
                CALL [15] {
                  function: timestamp
                  args: {
                    CONSTANT [16] { value: 50 }
                  }
                }
              }
            }
          }
        }
        CALL [17] {
          function: timestamp
          args: {
            CALL [18] {
              function: int
              args: {
                CALL [19] {
                  function: timestamp
                  args: {
                    CONSTANT [20] { value: 75 }
                  }
                }
              }
            }
          }
        }
        CALL [21] {
          function: _+_
          args: {
            CALL [22] {
              function: _+_
              args: {
                CALL [23] {
                  function: _+_
                  args: {
                    CALL [24] {
                      function: _+_
                      args: {
                        CALL [25] {
                          function: _+_
                          args: {
                            IDENT [26] {
                              name: @index0
                            }
                            CALL [27] {
                              function: getFullYear
                              target: {
                                IDENT [28] {
                                  name: @index3
                                }
                              }
                              args: {
                              }
                            }
                          }
                        }
                        CALL [29] {
                          function: getFullYear
                          target: {
                            IDENT [30] {
                              name: @index2
                            }
                          }
                          args: {
                          }
                        }
                      }
                    }
                    IDENT [31] {
                      name: @index0
                    }
                  }
                }
                CALL [32] {
                  function: getSeconds
                  target: {
                    IDENT [33] {
                      name: @index2
                    }
                  }
                  args: {
                  }
                }
              }
            }
            IDENT [34] {
              name: @index1
            }
          }
        }
      }
    }
    CALL [35] {
      function: _==_
      args: {
        CALL [36] {
          function: _+_
          args: {
            CALL [37] {
              function: _+_
              args: {
                CALL [38] {
                  function: _+_
                  args: {
                    IDENT [39] {
                      name: @index4
                    }
                    IDENT [40] {
                      name: @index1
                    }
                  }
                }
                CALL [41] {
                  function: getMinutes
                  target: {
                    IDENT [42] {
                      name: @index3
                    }
                  }
                  args: {
                  }
                }
              }
            }
            IDENT [43] {
              name: @index0
            }
          }
        }
        CONSTANT [44] { value: 13934 }
      }
    }
  }
}
Test case: MAP_INDEX
Source: {"a": 2}["a"] + {"a": 2}["a"] * {"a": 2}["a"] == 6
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _[_]
          args: {
            MAP [4] {
              MAP_ENTRY [5] {
                key: {
                  CONSTANT [6] { value: "a" }
                }
                value: {
                  CONSTANT [7] { value: 2 }
                }
              }
            }
            CONSTANT [8] { value: "a" }
          }
        }
      }
    }
    CALL [9] {
      function: _==_
      args: {
        CALL [10] {
          function: _+_
          args: {
            IDENT [11] {
              name: @index0
            }
            CALL [12] {
              function: _*_
              args: {
                IDENT [13] {
                  name: @index0
                }
                IDENT [14] {
                  name: @index0
                }
              }
            }
          }
        }
        CONSTANT [15] { value: 6 }
      }
    }
  }
}
Test case: NESTED_MAP_CONSTRUCTION
Source: {'a': {'b': 1}, 'c': {'b': 1}, 'd': {'e': {'b': 1}}, 'e': {'e': {'b': 1}}}
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        MAP [3] {
          MAP_ENTRY [4] {
            key: {
              CONSTANT [5] { value: "e" }
            }
            value: {
              MAP [6] {
                MAP_ENTRY [7] {
                  key: {
                    CONSTANT [8] { value: "b" }
                  }
                  value: {
                    CONSTANT [9] { value: 1 }
                  }
                }
              }
            }
          }
        }
        MAP [10] {
          MAP_ENTRY [11] {
            key: {
              CONSTANT [12] { value: "b" }
            }
            value: {
              CONSTANT [13] { value: 1 }
            }
          }
        }
      }
    }
    MAP [14] {
      MAP_ENTRY [15] {
        key: {
          CONSTANT [16] { value: "a" }
        }
        value: {
          IDENT [17] {
            name: @index1
          }
        }
      }
      MAP_ENTRY [18] {
        key: {
          CONSTANT [19] { value: "c" }
        }
        value: {
          IDENT [20] {
            name: @index1
          }
        }
      }
      MAP_ENTRY [21] {
        key: {
          CONSTANT [22] { value: "d" }
        }
        value: {
          IDENT [23] {
            name: @index0
          }
        }
      }
      MAP_ENTRY [24] {
        key: {
          CONSTANT [25] { value: "e" }
        }
        value: {
          IDENT [26] {
            name: @index0
          }
        }
      }
    }
  }
}
Test case: NESTED_LIST_CONSTRUCTION
Source: [1, [1,2,3,4], 2, [1,2,3,4], 5, [1,2,3,4], 7, [[1,2], [1,2,3,4]], [1,2]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            CONSTANT [4] { value: 1 }
            CONSTANT [5] { value: 2 }
            CONSTANT [6] { value: 3 }
            CONSTANT [7] { value: 4 }
          }
        }
        LIST [8] {
          elements: {
            CONSTANT [9] { value: 1 }
            CONSTANT [10] { value: 2 }
          }
        }
      }
    }
    LIST [11] {
      elements: {
        CONSTANT [12] { value: 1 }
        IDENT [13] {
          name: @index0
        }
        CONSTANT [14] { value: 2 }
        IDENT [15] {
          name: @index0
        }
        CONSTANT [16] { value: 5 }
        IDENT [17] {
          name: @index0
        }
        CONSTANT [18] { value: 7 }
        LIST [19] {
          elements: {
            IDENT [20] {
              name: @index1
            }
            IDENT [21] {
              name: @index0
            }
          }
        }
        IDENT [22] {
          name: @index1
        }
      }
    }
  }
}
Test case: SELECT
Source: msg.single_int64 + msg.single_int64 == 6
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          IDENT [4] {
            name: msg
          }.single_int64
        }
      }
    }
    CALL [5] {
      function: _==_
      args: {
        CALL [6] {
          function: _+_
          args: {
            IDENT [7] {
              name: @index0
            }
            IDENT [8] {
              name: @index0
            }
          }
        }
        CONSTANT [9] { value: 6 }
      }
    }
  }
}
Test case: SELECT_NESTED_1
Source: msg.oneof_type.payload.single_int64 + msg.oneof_type.payload.single_int32 + msg.oneof_type.payload.single_int64 + msg.single_int64 + msg.oneof_type.payload.oneof_type.payload.single_int64 == 31
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.single_int64
        }
        SELECT [7] {
          SELECT [8] {
            IDENT [9] {
              name: msg
            }.oneof_type
          }.payload
        }
      }
    }
    CALL [10] {
      function: _==_
      args: {
        CALL [11] {
          function: _+_
          args: {
            CALL [12] {
              function: _+_
              args: {
                CALL [13] {
                  function: _+_
                  args: {
                    CALL [14] {
                      function: _+_
                      args: {
                        IDENT [15] {
                          name: @index0
                        }
                        SELECT [16] {
                          IDENT [17] {
                            name: @index1
                          }.single_int32
                        }
                      }
                    }
                    IDENT [18] {
                      name: @index0
                    }
                  }
                }
                SELECT [19] {
                  IDENT [20] {
                    name: msg
                  }.single_int64
                }
              }
            }
            SELECT [21] {
              SELECT [22] {
                SELECT [23] {
                  IDENT [24] {
                    name: @index1
                  }.oneof_type
                }.payload
              }.single_int64
            }
          }
        }
        CONSTANT [25] { value: 31 }
      }
    }
  }
}
Test case: SELECT_NESTED_2
Source: true || msg.oneof_type.payload.oneof_type.payload.oneof_type.payload.oneof_type.payload.single_bool || msg.oneof_type.payload.oneof_type.payload.oneof_type.child.child.payload.single_bool
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              SELECT [6] {
                SELECT [7] {
                  IDENT [8] {
                    name: msg
                  }.oneof_type
                }.payload
              }.oneof_type
            }.payload
          }.oneof_type
        }
      }
    }
    CALL [9] {
      function: _||_
      args: {
        CALL [10] {
          function: _||_
          args: {
            CONSTANT [11] { value: true }
            SELECT [12] {
              SELECT [13] {
                SELECT [14] {
                  SELECT [15] {
                    IDENT [16] {
                      name: @index0
                    }.payload
                  }.oneof_type
                }.payload
              }.single_bool
            }
          }
        }
        SELECT [17] {
          SELECT [18] {
            SELECT [19] {
              SELECT [20] {
                IDENT [21] {
                  name: @index0
                }.child
              }.child
            }.payload
          }.single_bool
        }
      }
    }
  }
}
Test case: SELECT_NESTED_MESSAGE_MAP_INDEX_1
Source: msg.oneof_type.payload.map_int32_int64[1] + msg.oneof_type.payload.map_int32_int64[1] + msg.oneof_type.payload.map_int32_int64[1] == 15
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _[_]
          args: {
            SELECT [4] {
              SELECT [5] {
                SELECT [6] {
                  IDENT [7] {
                    name: msg
                  }.oneof_type
                }.payload
              }.map_int32_int64
            }
            CONSTANT [8] { value: 1 }
          }
        }
      }
    }
    CALL [9] {
      function: _==_
      args: {
        CALL [10] {
          function: _+_
          args: {
            CALL [11] {
              function: _+_
              args: {
                IDENT [12] {
                  name: @index0
                }
                IDENT [13] {
                  name: @index0
                }
              }
            }
            IDENT [14] {
              name: @index0
            }
          }
        }
        CONSTANT [15] { value: 15 }
      }
    }
  }
}
Test case: SELECT_NESTED_MESSAGE_MAP_INDEX_2
Source: msg.oneof_type.payload.map_int32_int64[0] + msg.oneof_type.payload.map_int32_int64[1] + msg.oneof_type.payload.map_int32_int64[2] == 8
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.map_int32_int64
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [9] {
              function: _+_
              args: {
                CALL [10] {
                  function: _[_]
                  args: {
                    IDENT [11] {
                      name: @index0
                    }
                    CONSTANT [12] { value: 0 }
                  }
                }
                CALL [13] {
                  function: _[_]
                  args: {
                    IDENT [14] {
                      name: @index0
                    }
                    CONSTANT [15] { value: 1 }
                  }
                }
              }
            }
            CALL [16] {
              function: _[_]
              args: {
                IDENT [17] {
                  name: @index0
                }
                CONSTANT [18] { value: 2 }
              }
            }
          }
        }
        CONSTANT [19] { value: 8 }
      }
    }
  }
}
Test case: SELECT_NESTED_NO_COMMON_SUBEXPR
Source: msg.oneof_type.payload.oneof_type.payload.oneof_type.payload.oneof_type.payload.single_int64
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              SELECT [6] {
                SELECT [7] {
                  SELECT [8] {
                    IDENT [9] {
                      name: msg
                    }.oneof_type
                  }.payload
                }.oneof_type
              }.payload
            }.oneof_type
          }.payload
        }
      }
    }
    SELECT [10] {
      SELECT [11] {
        SELECT [12] {
          IDENT [13] {
            name: @index0
          }.oneof_type
        }.payload
      }.single_int64
    }
  }
}
Test case: TERNARY
Source: (msg.single_int64 > 0 ? msg.single_int64 : 0) == 3
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          IDENT [4] {
            name: msg
          }.single_int64
        }
      }
    }
    CALL [5] {
      function: _==_
      args: {
        CALL [6] {
          function: _?_:_
          args: {
            CALL [7] {
              function: _>_
              args: {
                IDENT [8] {
                  name: @index0
                }
                CONSTANT [9] { value: 0 }
              }
            }
            IDENT [10] {
              name: @index0
            }
            CONSTANT [11] { value: 0 }
          }
        }
        CONSTANT [12] { value: 3 }
      }
    }
  }
}
Test case: TERNARY_BIND_RHS_ONLY
Source: false ? false : (msg.single_int64) + ((msg.single_int64 + 1) * 2) == 11
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          IDENT [4] {
            name: msg
          }.single_int64
        }
      }
    }
    CALL [5] {
      function: _?_:_
      args: {
        CONSTANT [6] { value: false }
        CONSTANT [7] { value: false }
        CALL [8] {
          function: _==_
          args: {
            CALL [9] {
              function: _+_
              args: {
                IDENT [10] {
                  name: @index0
                }
                CALL [11] {
                  function: _*_
                  args: {
                    CALL [12] {
                      function: _+_
                      args: {
                        IDENT [13] {
                          name: @index0
                        }
                        CONSTANT [14] { value: 1 }
                      }
                    }
                    CONSTANT [15] { value: 2 }
                  }
                }
              }
            }
            CONSTANT [16] { value: 11 }
          }
        }
      }
    }
  }
}
Test case: NESTED_TERNARY
Source: (msg.single_int64 > 0 ? (msg.single_int32 > 0 ? msg.single_int64 + msg.single_int32 : 0) : 0) == 8
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          IDENT [4] {
            name: msg
          }.single_int64
        }
        SELECT [5] {
          IDENT [6] {
            name: msg
          }.single_int32
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _?_:_
          args: {
            CALL [9] {
              function: _>_
              args: {
                IDENT [10] {
                  name: @index0
                }
                CONSTANT [11] { value: 0 }
              }
            }
            CALL [12] {
              function: _?_:_
              args: {
                CALL [13] {
                  function: _>_
                  args: {
                    IDENT [14] {
                      name: @index1
                    }
                    CONSTANT [15] { value: 0 }
                  }
                }
                CALL [16] {
                  function: _+_
                  args: {
                    IDENT [17] {
                      name: @index0
                    }
                    IDENT [18] {
                      name: @index1
                    }
                  }
                }
                CONSTANT [19] { value: 0 }
              }
            }
            CONSTANT [20] { value: 0 }
          }
        }
        CONSTANT [21] { value: 8 }
      }
    }
  }
}
Test case: MULTIPLE_MACROS_1
Source: size([[1].exists(i, i > 0)]) + size([[1].exists(j, j > 0)]) + size([[2].exists(k, k > 1)]) + size([[2].exists(l, l > 1)]) == 4
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [6] { value: false }
          }
          loop_condition: {
            CALL [7] {
              function: @not_strictly_false
              args: {
                CALL [8] {
                  function: !_
                  args: {
                    IDENT [9] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [10] {
              function: _||_
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                CALL [12] {
                  function: _>_
                  args: {
                    IDENT [13] {
                      name: @it:0:0
                    }
                    CONSTANT [14] { value: 0 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [15] {
              name: @ac:0:0
            }
          }
        }
        COMPREHENSION [16] {
          iter_var: @it:0:0
          iter_range: {
            LIST [17] {
              elements: {
                CONSTANT [18] { value: 2 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [19] { value: false }
          }
          loop_condition: {
            CALL [20] {
              function: @not_strictly_false
              args: {
                CALL [21] {
                  function: !_
                  args: {
                    IDENT [22] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [23] {
              function: _||_
              args: {
                IDENT [24] {
                  name: @ac:0:0
                }
                CALL [25] {
                  function: _>_
                  args: {
                    IDENT [26] {
                      name: @it:0:0
                    }
                    CONSTANT [27] { value: 1 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [28] {
              name: @ac:0:0
            }
          }
        }
        CALL [29] {
          function: size
          args: {
            LIST [30] {
              elements: {
                IDENT [31] {
                  name: @index0
                }
              }
            }
          }
        }
        CALL [32] {
          function: size
          args: {
            LIST [33] {
              elements: {
                IDENT [34] {
                  name: @index1
                }
              }
            }
          }
        }
      }
    }
    CALL [35] {
      function: _==_
      args: {
        CALL [36] {
          function: _+_
          args: {
            CALL [37] {
              function: _+_
              args: {
                CALL [38] {
                  function: _+_
                  args: {
                    IDENT [39] {
                      name: @index2
                    }
                    IDENT [40] {
                      name: @index2
                    }
                  }
                }
                IDENT [41] {
                  name: @index3
                }
              }
            }
            IDENT [42] {
              name: @index3
            }
          }
        }
        CONSTANT [43] { value: 4 }
      }
    }
  }
}
Test case: MULTIPLE_MACROS_2
Source: [[1].exists(i, i > 0)] + [[1].exists(j, j > 0)] + [['a'].exists(k, k == 'a')] + [['a'].exists(l, l == 'a')] == [true, true, true, true]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [6] { value: false }
          }
          loop_condition: {
            CALL [7] {
              function: @not_strictly_false
              args: {
                CALL [8] {
                  function: !_
                  args: {
                    IDENT [9] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [10] {
              function: _||_
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                CALL [12] {
                  function: _>_
                  args: {
                    IDENT [13] {
                      name: @it:0:0
                    }
                    CONSTANT [14] { value: 0 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [15] {
              name: @ac:0:0
            }
          }
        }
        COMPREHENSION [16] {
          iter_var: @it:0:1
          iter_range: {
            LIST [17] {
              elements: {
                CONSTANT [18] { value: "a" }
              }
            }
          }
          accu_var: @ac:0:1
          accu_init: {
            CONSTANT [19] { value: false }
          }
          loop_condition: {
            CALL [20] {
              function: @not_strictly_false
              args: {
                CALL [21] {
                  function: !_
                  args: {
                    IDENT [22] {
                      name: @ac:0:1
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [23] {
              function: _||_
              args: {
                IDENT [24] {
                  name: @ac:0:1
                }
                CALL [25] {
                  function: _==_
                  args: {
                    IDENT [26] {
                      name: @it:0:1
                    }
                    CONSTANT [27] { value: "a" }
                  }
                }
              }
            }
          }
          result: {
            IDENT [28] {
              name: @ac:0:1
            }
          }
        }
        LIST [29] {
          elements: {
            IDENT [30] {
              name: @index0
            }
          }
        }
        LIST [31] {
          elements: {
            IDENT [32] {
              name: @index1
            }
          }
        }
      }
    }
    CALL [33] {
      function: _==_
      args: {
        CALL [34] {
          function: _+_
          args: {
            CALL [35] {
              function: _+_
              args: {
                CALL [36] {
                  function: _+_
                  args: {
                    IDENT [37] {
                      name: @index2
                    }
                    IDENT [38] {
                      name: @index2
                    }
                  }
                }
                IDENT [39] {
                  name: @index3
                }
              }
            }
            IDENT [40] {
              name: @index3
            }
          }
        }
        LIST [41] {
          elements: {
            CONSTANT [42] { value: true }
            CONSTANT [43] { value: true }
            CONSTANT [44] { value: true }
            CONSTANT [45] { value: true }
          }
        }
      }
    }
  }
}
Test case: MULTIPLE_MACROS_3
Source: [1].exists(i, i > 0) && [1].exists(j, j > 0) && [1].exists(k, k > 1) && [2].exists(l, l > 1)
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [6] { value: false }
          }
          loop_condition: {
            CALL [7] {
              function: @not_strictly_false
              args: {
                CALL [8] {
                  function: !_
                  args: {
                    IDENT [9] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [10] {
              function: _||_
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                CALL [12] {
                  function: _>_
                  args: {
                    IDENT [13] {
                      name: @it:0:0
                    }
                    CONSTANT [14] { value: 0 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [15] {
              name: @ac:0:0
            }
          }
        }
      }
    }
    CALL [16] {
      function: _&&_
      args: {
        CALL [17] {
          function: _&&_
          args: {
            IDENT [18] {
              name: @index0
            }
            IDENT [19] {
              name: @index0
            }
          }
        }
        CALL [20] {
          function: _&&_
          args: {
            COMPREHENSION [21] {
              iter_var: @it:0:0
              iter_range: {
                LIST [22] {
                  elements: {
                    CONSTANT [23] { value: 1 }
                  }
                }
              }
              accu_var: @ac:0:0
              accu_init: {
                CONSTANT [24] { value: false }
              }
              loop_condition: {
                CALL [25] {
                  function: @not_strictly_false
                  args: {
                    CALL [26] {
                      function: !_
                      args: {
                        IDENT [27] {
                          name: @ac:0:0
                        }
                      }
                    }
                  }
                }
              }
              loop_step: {
                CALL [28] {
                  function: _||_
                  args: {
                    IDENT [29] {
                      name: @ac:0:0
                    }
                    CALL [30] {
                      function: _>_
                      args: {
                        IDENT [31] {
                          name: @it:0:0
                        }
                        CONSTANT [32] { value: 1 }
                      }
                    }
                  }
                }
              }
              result: {
                IDENT [33] {
                  name: @ac:0:0
                }
              }
            }
            COMPREHENSION [34] {
              iter_var: @it:0:0
              iter_range: {
                LIST [35] {
                  elements: {
                    CONSTANT [36] { value: 2 }
                  }
                }
              }
              accu_var: @ac:0:0
              accu_init: {
                CONSTANT [37] { value: false }
              }
              loop_condition: {
                CALL [38] {
                  function: @not_strictly_false
                  args: {
                    CALL [39] {
                      function: !_
                      args: {
                        IDENT [40] {
                          name: @ac:0:0
                        }
                      }
                    }
                  }
                }
              }
              loop_step: {
                CALL [41] {
                  function: _||_
                  args: {
                    IDENT [42] {
                      name: @ac:0:0
                    }
                    CALL [43] {
                      function: _>_
                      args: {
                        IDENT [44] {
                          name: @it:0:0
                        }
                        CONSTANT [45] { value: 1 }
                      }
                    }
                  }
                }
              }
              result: {
                IDENT [46] {
                  name: @ac:0:0
                }
              }
            }
          }
        }
      }
    }
  }
}
Test case: MULTIPLE_MACROS_COMP_V2_1
Source: size([[1].exists(i,x,i > 0 && x >= 0)]) + size([[1].exists(j, y, j > 0 && y >= 0)]) + size([[2].exists(k,z,k > 1 && z >= 0)]) + size([[2].exists(l, w, l > 1 && w >= 0)])  == 4
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [6] { value: false }
          }
          loop_condition: {
            CALL [7] {
              function: @not_strictly_false
              args: {
                CALL [8] {
                  function: !_
                  args: {
                    IDENT [9] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [10] {
              function: _||_
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                CALL [12] {
                  function: _&&_
                  args: {
                    CALL [13] {
                      function: _>_
                      args: {
                        IDENT [14] {
                          name: @it:0:0
                        }
                        CONSTANT [15] { value: 0 }
                      }
                    }
                    CALL [16] {
                      function: _>=_
                      args: {
                        IDENT [17] {
                          name: @it2:0:0
                        }
                        CONSTANT [18] { value: 0 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [19] {
              name: @ac:0:0
            }
          }
        }
        COMPREHENSION [20] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [21] {
              elements: {
                CONSTANT [22] { value: 2 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [23] { value: false }
          }
          loop_condition: {
            CALL [24] {
              function: @not_strictly_false
              args: {
                CALL [25] {
                  function: !_
                  args: {
                    IDENT [26] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [27] {
              function: _||_
              args: {
                IDENT [28] {
                  name: @ac:0:0
                }
                CALL [29] {
                  function: _&&_
                  args: {
                    CALL [30] {
                      function: _>_
                      args: {
                        IDENT [31] {
                          name: @it:0:0
                        }
                        CONSTANT [32] { value: 1 }
                      }
                    }
                    CALL [33] {
                      function: _>=_
                      args: {
                        IDENT [34] {
                          name: @it2:0:0
                        }
                        CONSTANT [35] { value: 0 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [36] {
              name: @ac:0:0
            }
          }
        }
        CALL [37] {
          function: size
          args: {
            LIST [38] {
              elements: {
                IDENT [39] {
                  name: @index0
                }
              }
            }
          }
        }
        CALL [40] {
          function: size
          args: {
            LIST [41] {
              elements: {
                IDENT [42] {
                  name: @index1
                }
              }
            }
          }
        }
      }
    }
    CALL [43] {
      function: _==_
      args: {
        CALL [44] {
          function: _+_
          args: {
            CALL [45] {
              function: _+_
              args: {
                CALL [46] {
                  function: _+_
                  args: {
                    IDENT [47] {
                      name: @index2
                    }
                    IDENT [48] {
                      name: @index2
                    }
                  }
                }
                IDENT [49] {
                  name: @index3
                }
              }
            }
            IDENT [50] {
              name: @index3
            }
          }
        }
        CONSTANT [51] { value: 4 }
      }
    }
  }
}
Test case: MULTIPLE_MACROS_COMP_V2_2
Source: [1].exists(i, x, i > 0 && x > 0) && [1].exists(j, y, j > 0 && y > 0) && [1].exists(k, z, k > 1 && z > 0) && [2].exists(l, w, l > 1 && w > 0)
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [6] { value: false }
          }
          loop_condition: {
            CALL [7] {
              function: @not_strictly_false
              args: {
                CALL [8] {
                  function: !_
                  args: {
                    IDENT [9] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [10] {
              function: _||_
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                CALL [12] {
                  function: _&&_
                  args: {
                    CALL [13] {
                      function: _>_
                      args: {
                        IDENT [14] {
                          name: @it:0:0
                        }
                        CONSTANT [15] { value: 0 }
                      }
                    }
                    CALL [16] {
                      function: _>_
                      args: {
                        IDENT [17] {
                          name: @it2:0:0
                        }
                        CONSTANT [18] { value: 0 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [19] {
              name: @ac:0:0
            }
          }
        }
      }
    }
    CALL [20] {
      function: _&&_
      args: {
        CALL [21] {
          function: _&&_
          args: {
            IDENT [22] {
              name: @index0
            }
            IDENT [23] {
              name: @index0
            }
          }
        }
        CALL [24] {
          function: _&&_
          args: {
            COMPREHENSION [25] {
              iter_var: @it:0:0
              iter_var2: @it2:0:0
              iter_range: {
                LIST [26] {
                  elements: {
                    CONSTANT [27] { value: 1 }
                  }
                }
              }
              accu_var: @ac:0:0
              accu_init: {
                CONSTANT [28] { value: false }
              }
              loop_condition: {
                CALL [29] {
                  function: @not_strictly_false
                  args: {
                    CALL [30] {
                      function: !_
                      args: {
                        IDENT [31] {
                          name: @ac:0:0
                        }
                      }
                    }
                  }
                }
              }
              loop_step: {
                CALL [32] {
                  function: _||_
                  args: {
                    IDENT [33] {
                      name: @ac:0:0
                    }
                    CALL [34] {
                      function: _&&_
                      args: {
                        CALL [35] {
                          function: _>_
                          args: {
                            IDENT [36] {
                              name: @it:0:0
                            }
                            CONSTANT [37] { value: 1 }
                          }
                        }
                        CALL [38] {
                          function: _>_
                          args: {
                            IDENT [39] {
                              name: @it2:0:0
                            }
                            CONSTANT [40] { value: 0 }
                          }
                        }
                      }
                    }
                  }
                }
              }
              result: {
                IDENT [41] {
                  name: @ac:0:0
                }
              }
            }
            COMPREHENSION [42] {
              iter_var: @it:0:0
              iter_var2: @it2:0:0
              iter_range: {
                LIST [43] {
                  elements: {
                    CONSTANT [44] { value: 2 }
                  }
                }
              }
              accu_var: @ac:0:0
              accu_init: {
                CONSTANT [45] { value: false }
              }
              loop_condition: {
                CALL [46] {
                  function: @not_strictly_false
                  args: {
                    CALL [47] {
                      function: !_
                      args: {
                        IDENT [48] {
                          name: @ac:0:0
                        }
                      }
                    }
                  }
                }
              }
              loop_step: {
                CALL [49] {
                  function: _||_
                  args: {
                    IDENT [50] {
                      name: @ac:0:0
                    }
                    CALL [51] {
                      function: _&&_
                      args: {
                        CALL [52] {
                          function: _>_
                          args: {
                            IDENT [53] {
                              name: @it:0:0
                            }
                            CONSTANT [54] { value: 1 }
                          }
                        }
                        CALL [55] {
                          function: _>_
                          args: {
                            IDENT [56] {
                              name: @it2:0:0
                            }
                            CONSTANT [57] { value: 0 }
                          }
                        }
                      }
                    }
                  }
                }
              }
              result: {
                IDENT [58] {
                  name: @ac:0:0
                }
              }
            }
          }
        }
      }
    }
  }
}
Test case: NESTED_MACROS
Source: [1,2,3].map(i, [1, 2, 3].map(i, i + 1)) == [[2, 3, 4], [2, 3, 4], [2, 3, 4]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            CONSTANT [4] { value: 1 }
            CONSTANT [5] { value: 2 }
            CONSTANT [6] { value: 3 }
          }
        }
        LIST [7] {
          elements: {
            CONSTANT [8] { value: 2 }
            CONSTANT [9] { value: 3 }
            CONSTANT [10] { value: 4 }
          }
        }
        COMPREHENSION [11] {
          iter_var: @it:1:0
          iter_range: {
            IDENT [12] {
              name: @index0
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [13] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [14] { value: true }
          }
          loop_step: {
            CALL [15] {
              function: _+_
              args: {
                IDENT [16] {
                  name: @ac:1:0
                }
                LIST [17] {
                  elements: {
                    CALL [18] {
                      function: _+_
                      args: {
                        IDENT [19] {
                          name: @it:1:0
                        }
                        CONSTANT [20] { value: 1 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [21] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [22] {
      function: _==_
      args: {
        COMPREHENSION [23] {
          iter_var: @it:0:0
          iter_range: {
            IDENT [24] {
              name: @index0
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [25] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [26] { value: true }
          }
          loop_step: {
            CALL [27] {
              function: _+_
              args: {
                IDENT [28] {
                  name: @ac:0:0
                }
                LIST [29] {
                  elements: {
                    IDENT [30] {
                      name: @index2
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [31] {
              name: @ac:0:0
            }
          }
        }
        LIST [32] {
          elements: {
            IDENT [33] {
              name: @index1
            }
            IDENT [34] {
              name: @index1
            }
            IDENT [35] {
              name: @index1
            }
          }
        }
      }
    }
  }
}
Test case: NESTED_MACROS_2
Source: [1, 2].map(y, [1, 2, 3].filter(x, x == y)) == [[1], [2]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:1:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
                CONSTANT [7] { value: 3 }
              }
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [8] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [9] { value: true }
          }
          loop_step: {
            CALL [10] {
              function: _?_:_
              args: {
                CALL [11] {
                  function: _==_
                  args: {
                    IDENT [12] {
                      name: @it:1:0
                    }
                    IDENT [13] {
                      name: @it:0:0
                    }
                  }
                }
                CALL [14] {
                  function: _+_
                  args: {
                    IDENT [15] {
                      name: @ac:1:0
                    }
                    LIST [16] {
                      elements: {
                        IDENT [17] {
                          name: @it:1:0
                        }
                      }
                    }
                  }
                }
                IDENT [18] {
                  name: @ac:1:0
                }
              }
            }
          }
          result: {
            IDENT [19] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [20] {
      function: _==_
      args: {
        COMPREHENSION [21] {
          iter_var: @it:0:0
          iter_range: {
            LIST [22] {
              elements: {
                CONSTANT [23] { value: 1 }
                CONSTANT [24] { value: 2 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [25] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [26] { value: true }
          }
          loop_step: {
            CALL [27] {
              function: _+_
              args: {
                IDENT [28] {
                  name: @ac:0:0
                }
                LIST [29] {
                  elements: {
                    IDENT [30] {
                      name: @index0
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [31] {
              name: @ac:0:0
            }
          }
        }
        LIST [32] {
          elements: {
            LIST [33] {
              elements: {
                CONSTANT [34] { value: 1 }
              }
            }
            LIST [35] {
              elements: {
                CONSTANT [36] { value: 2 }
              }
            }
          }
        }
      }
    }
  }
}
Test case: NESTED_MACROS_COMP_V2_1
Source: [1,2,3].transformList(i, v, [1, 2, 3].transformList(i, v, i + v + 1)) == [[2, 4, 6], [2, 4, 6], [2, 4, 6]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            CONSTANT [4] { value: 1 }
            CONSTANT [5] { value: 2 }
            CONSTANT [6] { value: 3 }
          }
        }
        LIST [7] {
          elements: {
            CONSTANT [8] { value: 2 }
            CONSTANT [9] { value: 4 }
            CONSTANT [10] { value: 6 }
          }
        }
        COMPREHENSION [11] {
          iter_var: @it:1:0
          iter_var2: @it2:1:0
          iter_range: {
            IDENT [12] {
              name: @index0
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [13] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [14] { value: true }
          }
          loop_step: {
            CALL [15] {
              function: _+_
              args: {
                IDENT [16] {
                  name: @ac:1:0
                }
                LIST [17] {
                  elements: {
                    CALL [18] {
                      function: _+_
                      args: {
                        CALL [19] {
                          function: _+_
                          args: {
                            IDENT [20] {
                              name: @it:1:0
                            }
                            IDENT [21] {
                              name: @it2:1:0
                            }
                          }
                        }
                        CONSTANT [22] { value: 1 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [23] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [24] {
      function: _==_
      args: {
        COMPREHENSION [25] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            IDENT [26] {
              name: @index0
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [27] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [28] { value: true }
          }
          loop_step: {
            CALL [29] {
              function: _+_
              args: {
                IDENT [30] {
                  name: @ac:0:0
                }
                LIST [31] {
                  elements: {
                    IDENT [32] {
                      name: @index2
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [33] {
              name: @ac:0:0
            }
          }
        }
        LIST [34] {
          elements: {
            IDENT [35] {
              name: @index1
            }
            IDENT [36] {
              name: @index1
            }
            IDENT [37] {
              name: @index1
            }
          }
        }
      }
    }
  }
}
Test case: NESTED_MACROS_COMP_V2_2
Source: [1, 2].transformList(i, y, [1, 2, 3].filter(x, x == y && i < y)) == [[1], [2]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:1:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
                CONSTANT [7] { value: 3 }
              }
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [8] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [9] { value: true }
          }
          loop_step: {
            CALL [10] {
              function: _?_:_
              args: {
                CALL [11] {
                  function: _&&_
                  args: {
                    CALL [12] {
                      function: _==_
                      args: {
                        IDENT [13] {
                          name: @it:1:0
                        }
                        IDENT [14] {
                          name: @it2:0:0
                        }
                      }
                    }
                    CALL [15] {
                      function: _<_
                      args: {
                        IDENT [16] {
                          name: @it:0:0
                        }
                        IDENT [17] {
                          name: @it2:0:0
                        }
                      }
                    }
                  }
                }
                CALL [18] {
                  function: _+_
                  args: {
                    IDENT [19] {
                      name: @ac:1:0
                    }
                    LIST [20] {
                      elements: {
                        IDENT [21] {
                          name: @it:1:0
                        }
                      }
                    }
                  }
                }
                IDENT [22] {
                  name: @ac:1:0
                }
              }
            }
          }
          result: {
            IDENT [23] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [24] {
      function: _==_
      args: {
        COMPREHENSION [25] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [26] {
              elements: {
                CONSTANT [27] { value: 1 }
                CONSTANT [28] { value: 2 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [29] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [30] { value: true }
          }
          loop_step: {
            CALL [31] {
              function: _+_
              args: {
                IDENT [32] {
                  name: @ac:0:0
                }
                LIST [33] {
                  elements: {
                    IDENT [34] {
                      name: @index0
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [35] {
              name: @ac:0:0
            }
          }
        }
        LIST [36] {
          elements: {
            LIST [37] {
              elements: {
                CONSTANT [38] { value: 1 }
              }
            }
            LIST [39] {
              elements: {
                CONSTANT [40] { value: 2 }
              }
            }
          }
        }
      }
    }
  }
}
Test case: ADJACENT_NESTED_MACROS
Source: [1,2,3].map(i, [1, 2, 3].map(i, i + 1)) == [1,2,3].map(j, [1, 2, 3].map(j, j + 1))
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:1:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
                CONSTANT [7] { value: 3 }
              }
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [8] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [9] { value: true }
          }
          loop_step: {
            CALL [10] {
              function: _+_
              args: {
                IDENT [11] {
                  name: @ac:1:0
                }
                LIST [12] {
                  elements: {
                    CALL [13] {
                      function: _+_
                      args: {
                        IDENT [14] {
                          name: @it:1:0
                        }
                        CONSTANT [15] { value: 1 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [16] {
              name: @ac:1:0
            }
          }
        }
        COMPREHENSION [17] {
          iter_var: @it:0:0
          iter_range: {
            LIST [18] {
              elements: {
                CONSTANT [19] { value: 1 }
                CONSTANT [20] { value: 2 }
                CONSTANT [21] { value: 3 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [22] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [23] { value: true }
          }
          loop_step: {
            CALL [24] {
              function: _+_
              args: {
                IDENT [25] {
                  name: @ac:0:0
                }
                LIST [26] {
                  elements: {
                    IDENT [27] {
                      name: @index0
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [28] {
              name: @ac:0:0
            }
          }
        }
      }
    }
    CALL [29] {
      function: _==_
      args: {
        IDENT [30] {
          name: @index1
        }
        IDENT [31] {
          name: @index1
        }
      }
    }
  }
}
Test case: ADJACENT_NESTED_MACROS_COMP_V2
Source: [1,2,3].transformMap(i, x, [1, 2, 3].transformMap(i, x, i + x + 1)) == [1,2,3].transformMap(j, y, [1, 2, 3].transformMap(j, y,  j + y + 1))
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        COMPREHENSION [3] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 1 }
                CONSTANT [6] { value: 2 }
                CONSTANT [7] { value: 3 }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            MAP [8] {

            }
          }
          loop_condition: {
            CONSTANT [9] { value: true }
          }
          loop_step: {
            CALL [10] {
              function: cel.@mapInsert
              args: {
                IDENT [11] {
                  name: @ac:0:0
                }
                IDENT [12] {
                  name: @it:0:0
                }
                COMPREHENSION [13] {
                  iter_var: @it:1:0
                  iter_var2: @it2:1:0
                  iter_range: {
                    LIST [14] {
                      elements: {
                        CONSTANT [15] { value: 1 }
                        CONSTANT [16] { value: 2 }
                        CONSTANT [17] { value: 3 }
                      }
                    }
                  }
                  accu_var: @ac:1:0
                  accu_init: {
                    MAP [18] {

                    }
                  }
                  loop_condition: {
                    CONSTANT [19] { value: true }
                  }
                  loop_step: {
                    CALL [20] {
                      function: cel.@mapInsert
                      args: {
                        IDENT [21] {
                          name: @ac:1:0
                        }
                        IDENT [22] {
                          name: @it:1:0
                        }
                        CALL [23] {
                          function: _+_
                          args: {
                            CALL [24] {
                              function: _+_
                              args: {
                                IDENT [25] {
                                  name: @it:1:0
                                }
                                IDENT [26] {
                                  name: @it2:1:0
                                }
                              }
                            }
                            CONSTANT [27] { value: 1 }
                          }
                        }
                      }
                    }
                  }
                  result: {
                    IDENT [28] {
                      name: @ac:1:0
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [29] {
              name: @ac:0:0
            }
          }
        }
      }
    }
    CALL [30] {
      function: _==_
      args: {
        IDENT [31] {
          name: @index0
        }
        IDENT [32] {
          name: @index0
        }
      }
    }
  }
}
Test case: INCLUSION_LIST
Source: 1 in [1,2,3] && 2 in [1,2,3] && 3 in [3, [1,2,3]] && 1 in [1,2,3]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: @in
          args: {
            CONSTANT [4] { value: 1 }
            LIST [5] {
              elements: {
                CONSTANT [6] { value: 1 }
                CONSTANT [7] { value: 2 }
                CONSTANT [8] { value: 3 }
              }
            }
          }
        }
        LIST [9] {
          elements: {
            CONSTANT [10] { value: 1 }
            CONSTANT [11] { value: 2 }
            CONSTANT [12] { value: 3 }
          }
        }
      }
    }
    CALL [13] {
      function: _&&_
      args: {
        CALL [14] {
          function: _&&_
          args: {
            IDENT [15] {
              name: @index0
            }
            CALL [16] {
              function: @in
              args: {
                CONSTANT [17] { value: 2 }
                IDENT [18] {
                  name: @index1
                }
              }
            }
          }
        }
        CALL [19] {
          function: _&&_
          args: {
            CALL [20] {
              function: @in
              args: {
                CONSTANT [21] { value: 3 }
                LIST [22] {
                  elements: {
                    CONSTANT [23] { value: 3 }
                    IDENT [24] {
                      name: @index1
                    }
                  }
                }
              }
            }
            IDENT [25] {
              name: @index0
            }
          }
        }
      }
    }
  }
}
Test case: INCLUSION_MAP
Source: 2 in {'a': 1, 2: {true: false}, 3: {true: false}}
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        MAP [3] {
          MAP_ENTRY [4] {
            key: {
              CONSTANT [5] { value: true }
            }
            value: {
              CONSTANT [6] { value: false }
            }
          }
        }
      }
    }
    CALL [7] {
      function: @in
      args: {
        CONSTANT [8] { value: 2 }
        MAP [9] {
          MAP_ENTRY [10] {
            key: {
              CONSTANT [11] { value: "a" }
            }
            value: {
              CONSTANT [12] { value: 1 }
            }
          }
          MAP_ENTRY [13] {
            key: {
              CONSTANT [14] { value: 2 }
            }
            value: {
              IDENT [15] {
                name: @index0
              }
            }
          }
          MAP_ENTRY [16] {
            key: {
              CONSTANT [17] { value: 3 }
            }
            value: {
              IDENT [18] {
                name: @index0
              }
            }
          }
        }
      }
    }
  }
}
Test case: MACRO_ITER_VAR_NOT_REFERENCED
Source: [1,2].map(i, [1, 2].map(i, [3,4])) == [[[3, 4], [3, 4]], [[3, 4], [3, 4]]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 3 }
                CONSTANT [6] { value: 4 }
              }
            }
            LIST [7] {
              elements: {
                CONSTANT [8] { value: 3 }
                CONSTANT [9] { value: 4 }
              }
            }
          }
        }
        LIST [10] {
          elements: {
            CONSTANT [11] { value: 1 }
            CONSTANT [12] { value: 2 }
          }
        }
        COMPREHENSION [13] {
          iter_var: @it:1:0
          iter_range: {
            IDENT [14] {
              name: @index1
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [15] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [16] { value: true }
          }
          loop_step: {
            CALL [17] {
              function: _+_
              args: {
                IDENT [18] {
                  name: @ac:1:0
                }
                LIST [19] {
                  elements: {
                    LIST [20] {
                      elements: {
                        CONSTANT [21] { value: 3 }
                        CONSTANT [22] { value: 4 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [23] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [24] {
      function: _==_
      args: {
        COMPREHENSION [25] {
          iter_var: @it:0:0
          iter_range: {
            IDENT [26] {
              name: @index1
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [27] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [28] { value: true }
          }
          loop_step: {
            CALL [29] {
              function: _+_
              args: {
                IDENT [30] {
                  name: @ac:0:0
                }
                LIST [31] {
                  elements: {
                    IDENT [32] {
                      name: @index2
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [33] {
              name: @ac:0:0
            }
          }
        }
        LIST [34] {
          elements: {
            IDENT [35] {
              name: @index0
            }
            IDENT [36] {
              name: @index0
            }
          }
        }
      }
    }
  }
}
Test case: MACRO_ITER_VAR2_NOT_REFERENCED
Source: [1,2].transformList(i, v, [1, 2].transformList(i, v, [3,4])) == [[[3, 4], [3, 4]], [[3, 4], [3, 4]]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            LIST [4] {
              elements: {
                CONSTANT [5] { value: 3 }
                CONSTANT [6] { value: 4 }
              }
            }
            LIST [7] {
              elements: {
                CONSTANT [8] { value: 3 }
                CONSTANT [9] { value: 4 }
              }
            }
          }
        }
        LIST [10] {
          elements: {
            CONSTANT [11] { value: 1 }
            CONSTANT [12] { value: 2 }
          }
        }
        COMPREHENSION [13] {
          iter_var: @it:1:0
          iter_var2: @it2:1:0
          iter_range: {
            IDENT [14] {
              name: @index1
            }
          }
          accu_var: @ac:1:0
          accu_init: {
            LIST [15] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [16] { value: true }
          }
          loop_step: {
            CALL [17] {
              function: _+_
              args: {
                IDENT [18] {
                  name: @ac:1:0
                }
                LIST [19] {
                  elements: {
                    LIST [20] {
                      elements: {
                        CONSTANT [21] { value: 3 }
                        CONSTANT [22] { value: 4 }
                      }
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [23] {
              name: @ac:1:0
            }
          }
        }
      }
    }
    CALL [24] {
      function: _==_
      args: {
        COMPREHENSION [25] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            IDENT [26] {
              name: @index1
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            LIST [27] {
              elements: {
              }
            }
          }
          loop_condition: {
            CONSTANT [28] { value: true }
          }
          loop_step: {
            CALL [29] {
              function: _+_
              args: {
                IDENT [30] {
                  name: @ac:0:0
                }
                LIST [31] {
                  elements: {
                    IDENT [32] {
                      name: @index2
                    }
                  }
                }
              }
            }
          }
          result: {
            IDENT [33] {
              name: @ac:0:0
            }
          }
        }
        LIST [34] {
          elements: {
            IDENT [35] {
              name: @index0
            }
            IDENT [36] {
              name: @index0
            }
          }
        }
      }
    }
  }
}
Test case: MACRO_SHADOWED_VARIABLE
Source: [x - 1 > 3 ? x - 1 : 5].exists(x, x - 1 > 3) || x - 1 > 3
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _>_
          args: {
            CALL [4] {
              function: _-_
              args: {
                IDENT [5] {
                  name: x
                }
                CONSTANT [6] { value: 1 }
              }
            }
            CONSTANT [7] { value: 3 }
          }
        }
      }
    }
    CALL [8] {
      function: _||_
      args: {
        COMPREHENSION [9] {
          iter_var: @it:0:0
          iter_range: {
            LIST [10] {
              elements: {
                CALL [11] {
                  function: _?_:_
                  args: {
                    IDENT [12] {
                      name: @index0
                    }
                    CALL [13] {
                      function: _-_
                      args: {
                        IDENT [14] {
                          name: x
                        }
                        CONSTANT [15] { value: 1 }
                      }
                    }
                    CONSTANT [16] { value: 5 }
                  }
                }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [17] { value: false }
          }
          loop_condition: {
            CALL [18] {
              function: @not_strictly_false
              args: {
                CALL [19] {
                  function: !_
                  args: {
                    IDENT [20] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [21] {
              function: _||_
              args: {
                IDENT [22] {
                  name: @ac:0:0
                }
                CALL [23] {
                  function: _>_
                  args: {
                    CALL [24] {
                      function: _-_
                      args: {
                        IDENT [25] {
                          name: @it:0:0
                        }
                        CONSTANT [26] { value: 1 }
                      }
                    }
                    CONSTANT [27] { value: 3 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [28] {
              name: @ac:0:0
            }
          }
        }
        IDENT [29] {
          name: @index0
        }
      }
    }
  }
}
Test case: MACRO_SHADOWED_VARIABLE_2
Source: ["foo", "bar"].map(x, [x + x, x + x]).map(x, [x + x, x + x])
=====>
COMPREHENSION [35] {
  iter_var: x
  iter_range: {
    COMPREHENSION [19] {
      iter_var: x
      iter_range: {
        LIST [1] {
          elements: {
            CONSTANT [2] { value: "foo" }
            CONSTANT [3] { value: "bar" }
          }
        }
      }
      accu_var: @result
      accu_init: {
        LIST [13] {
          elements: {
          }
        }
      }
      loop_condition: {
        CONSTANT [14] { value: true }
      }
      loop_step: {
        CALL [17] {
          function: _+_
          args: {
            IDENT [15] {
              name: @result
            }
            LIST [16] {
              elements: {
                LIST [6] {
                  elements: {
                    CALL [8] {
                      function: _+_
                      args: {
                        IDENT [7] {
                          name: x
                        }
                        IDENT [9] {
                          name: x
                        }
                      }
                    }
                    CALL [11] {
                      function: _+_
                      args: {
                        IDENT [10] {
                          name: x
                        }
                        IDENT [12] {
                          name: x
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      result: {
        IDENT [18] {
          name: @result
        }
      }
    }
  }
  accu_var: @result
  accu_init: {
    LIST [29] {
      elements: {
      }
    }
  }
  loop_condition: {
    CONSTANT [30] { value: true }
  }
  loop_step: {
    CALL [33] {
      function: _+_
      args: {
        IDENT [31] {
          name: @result
        }
        LIST [32] {
          elements: {
            LIST [22] {
              elements: {
                CALL [24] {
                  function: _+_
                  args: {
                    IDENT [23] {
                      name: x
                    }
                    IDENT [25] {
                      name: x
                    }
                  }
                }
                CALL [27] {
                  function: _+_
                  args: {
                    IDENT [26] {
                      name: x
                    }
                    IDENT [28] {
                      name: x
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result: {
    IDENT [34] {
      name: @result
    }
  }
}
Test case: MACRO_SHADOWED_VARIABLE_COMP_V2_1
Source: [x - y - 1 > 3 ? x - y - 1 : 5].exists(x, y, x - y - 1 > 3) || x - y - 1 > 3
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _>_
          args: {
            CALL [4] {
              function: _-_
              args: {
                CALL [5] {
                  function: _-_
                  args: {
                    IDENT [6] {
                      name: x
                    }
                    IDENT [7] {
                      name: y
                    }
                  }
                }
                CONSTANT [8] { value: 1 }
              }
            }
            CONSTANT [9] { value: 3 }
          }
        }
      }
    }
    CALL [10] {
      function: _||_
      args: {
        COMPREHENSION [11] {
          iter_var: @it:0:0
          iter_var2: @it2:0:0
          iter_range: {
            LIST [12] {
              elements: {
                CALL [13] {
                  function: _?_:_
                  args: {
                    IDENT [14] {
                      name: @index0
                    }
                    CALL [15] {
                      function: _-_
                      args: {
                        CALL [16] {
                          function: _-_
                          args: {
                            IDENT [17] {
                              name: x
                            }
                            IDENT [18] {
                              name: y
                            }
                          }
                        }
                        CONSTANT [19] { value: 1 }
                      }
                    }
                    CONSTANT [20] { value: 5 }
                  }
                }
              }
            }
          }
          accu_var: @ac:0:0
          accu_init: {
            CONSTANT [21] { value: false }
          }
          loop_condition: {
            CALL [22] {
              function: @not_strictly_false
              args: {
                CALL [23] {
                  function: !_
                  args: {
                    IDENT [24] {
                      name: @ac:0:0
                    }
                  }
                }
              }
            }
          }
          loop_step: {
            CALL [25] {
              function: _||_
              args: {
                IDENT [26] {
                  name: @ac:0:0
                }
                CALL [27] {
                  function: _>_
                  args: {
                    CALL [28] {
                      function: _-_
                      args: {
                        CALL [29] {
                          function: _-_
                          args: {
                            IDENT [30] {
                              name: @it:0:0
                            }
                            IDENT [31] {
                              name: @it2:0:0
                            }
                          }
                        }
                        CONSTANT [32] { value: 1 }
                      }
                    }
                    CONSTANT [33] { value: 3 }
                  }
                }
              }
            }
          }
          result: {
            IDENT [34] {
              name: @ac:0:0
            }
          }
        }
        IDENT [35] {
          name: @index0
        }
      }
    }
  }
}
Test case: MACRO_SHADOWED_VARIABLE_COMP_V2_2
Source: ["foo", "bar"].transformMap(x, y, [x + x, y + y]).transformMap(x, y, [x + x, y + y])
=====>
COMPREHENSION [35] {
  iter_var: x
  iter_var2: y
  iter_range: {
    COMPREHENSION [19] {
      iter_var: x
      iter_var2: y
      iter_range: {
        LIST [1] {
          elements: {
            CONSTANT [2] { value: "foo" }
            CONSTANT [3] { value: "bar" }
          }
        }
      }
      accu_var: @result
      accu_init: {
        MAP [14] {

        }
      }
      loop_condition: {
        CONSTANT [15] { value: true }
      }
      loop_step: {
        CALL [17] {
          function: cel.@mapInsert
          args: {
            IDENT [16] {
              name: @result
            }
            IDENT [5] {
              name: x
            }
            LIST [7] {
              elements: {
                CALL [9] {
                  function: _+_
                  args: {
                    IDENT [8] {
                      name: x
                    }
                    IDENT [10] {
                      name: x
                    }
                  }
                }
                CALL [12] {
                  function: _+_
                  args: {
                    IDENT [11] {
                      name: y
                    }
                    IDENT [13] {
                      name: y
                    }
                  }
                }
              }
            }
          }
        }
      }
      result: {
        IDENT [18] {
          name: @result
        }
      }
    }
  }
  accu_var: @result
  accu_init: {
    MAP [30] {

    }
  }
  loop_condition: {
    CONSTANT [31] { value: true }
  }
  loop_step: {
    CALL [33] {
      function: cel.@mapInsert
      args: {
        IDENT [32] {
          name: @result
        }
        IDENT [21] {
          name: x
        }
        LIST [23] {
          elements: {
            CALL [25] {
              function: _+_
              args: {
                IDENT [24] {
                  name: x
                }
                IDENT [26] {
                  name: x
                }
              }
            }
            CALL [28] {
              function: _+_
              args: {
                IDENT [27] {
                  name: y
                }
                IDENT [29] {
                  name: y
                }
              }
            }
          }
        }
      }
    }
  }
  result: {
    IDENT [34] {
      name: @result
    }
  }
}
Test case: PRESENCE_TEST
Source: has({'a': true}.a) && {'a':true}['a']
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        MAP [3] {
          MAP_ENTRY [4] {
            key: {
              CONSTANT [5] { value: "a" }
            }
            value: {
              CONSTANT [6] { value: true }
            }
          }
        }
      }
    }
    CALL [7] {
      function: _&&_
      args: {
        SELECT [8] {
          IDENT [9] {
            name: @index0
          }.a~presence_test
        }
        CALL [10] {
          function: _[_]
          args: {
            IDENT [11] {
              name: @index0
            }
            CONSTANT [12] { value: "a" }
          }
        }
      }
    }
  }
}
Test case: PRESENCE_TEST_2
Source: has({'a': true}.a) && has({'a': true}.a)
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          MAP [4] {
            MAP_ENTRY [5] {
              key: {
                CONSTANT [6] { value: "a" }
              }
              value: {
                CONSTANT [7] { value: true }
              }
            }
          }.a~presence_test
        }
      }
    }
    CALL [8] {
      function: _&&_
      args: {
        IDENT [9] {
          name: @index0
        }
        IDENT [10] {
          name: @index0
        }
      }
    }
  }
}
Test case: PRESENCE_TEST_WITH_TERNARY
Source: (has(msg.oneof_type.payload) ? msg.oneof_type.payload.single_int64 : 0) == 10
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          IDENT [4] {
            name: msg
          }.oneof_type
        }
      }
    }
    CALL [5] {
      function: _==_
      args: {
        CALL [6] {
          function: _?_:_
          args: {
            SELECT [7] {
              IDENT [8] {
                name: @index0
              }.payload~presence_test
            }
            SELECT [9] {
              SELECT [10] {
                IDENT [11] {
                  name: @index0
                }.payload
              }.single_int64
            }
            CONSTANT [12] { value: 0 }
          }
        }
        CONSTANT [13] { value: 10 }
      }
    }
  }
}
Test case: PRESENCE_TEST_WITH_TERNARY_2
Source: (has(msg.oneof_type.payload) ? msg.oneof_type.payload.single_int64 : msg.oneof_type.payload.single_int64 * 0) == 10
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.single_int64
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _?_:_
          args: {
            SELECT [9] {
              SELECT [10] {
                IDENT [11] {
                  name: msg
                }.oneof_type
              }.payload~presence_test
            }
            IDENT [12] {
              name: @index0
            }
            CALL [13] {
              function: _*_
              args: {
                IDENT [14] {
                  name: @index0
                }
                CONSTANT [15] { value: 0 }
              }
            }
          }
        }
        CONSTANT [16] { value: 10 }
      }
    }
  }
}
Test case: PRESENCE_TEST_WITH_TERNARY_3
Source: (has(msg.oneof_type.payload.single_int64) ? msg.oneof_type.payload.single_int64 : msg.oneof_type.payload.single_int64 * 0) == 10
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.single_int64
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: _?_:_
          args: {
            SELECT [9] {
              SELECT [10] {
                SELECT [11] {
                  IDENT [12] {
                    name: msg
                  }.oneof_type
                }.payload
              }.single_int64~presence_test
            }
            IDENT [13] {
              name: @index0
            }
            CALL [14] {
              function: _*_
              args: {
                IDENT [15] {
                  name: @index0
                }
                CONSTANT [16] { value: 0 }
              }
            }
          }
        }
        CONSTANT [17] { value: 10 }
      }
    }
  }
}
Test case: PRESENCE_TEST_WITH_TERNARY_NESTED
Source: (has(msg.oneof_type) && has(msg.oneof_type.payload) && has(msg.oneof_type.payload.single_int64)) ? ((has(msg.oneof_type.payload.map_string_string) && has(msg.oneof_type.payload.map_string_string.key)) ? msg.oneof_type.payload.map_string_string.key == 'A' : false) : false
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.map_string_string
        }
        SELECT [7] {
          SELECT [8] {
            IDENT [9] {
              name: msg
            }.oneof_type
          }.payload
        }
      }
    }
    CALL [10] {
      function: _?_:_
      args: {
        CALL [11] {
          function: _&&_
          args: {
            CALL [12] {
              function: _&&_
              args: {
                SELECT [13] {
                  IDENT [14] {
                    name: msg
                  }.oneof_type~presence_test
                }
                SELECT [15] {
                  SELECT [16] {
                    IDENT [17] {
                      name: msg
                    }.oneof_type
                  }.payload~presence_test
                }
              }
            }
            SELECT [18] {
              IDENT [19] {
                name: @index1
              }.single_int64~presence_test
            }
          }
        }
        CALL [20] {
          function: _?_:_
          args: {
            CALL [21] {
              function: _&&_
              args: {
                SELECT [22] {
                  IDENT [23] {
                    name: @index1
                  }.map_string_string~presence_test
                }
                SELECT [24] {
                  IDENT [25] {
                    name: @index0
                  }.key~presence_test
                }
              }
            }
            CALL [26] {
              function: _==_
              args: {
                SELECT [27] {
                  IDENT [28] {
                    name: @index0
                  }.key
                }
                CONSTANT [29] { value: "A" }
              }
            }
            CONSTANT [30] { value: false }
          }
        }
        CONSTANT [31] { value: false }
      }
    }
  }
}
Test case: OPTIONAL_LIST
Source: [10, ?optional.none(), [?optional.none(), ?opt_x], [?optional.none(), ?opt_x]] == [10, [5], [5]]
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        LIST [3] {
          elements: {
            CALL [4] {
              function: optional.none
              args: {
              }
            }
            IDENT [5] {
              name: opt_x
            }
          }
          optional_indices: [0, 1]
        }
        LIST [6] {
          elements: {
            CONSTANT [7] { value: 5 }
          }
        }
      }
    }
    CALL [8] {
      function: _==_
      args: {
        LIST [9] {
          elements: {
            CONSTANT [10] { value: 10 }
            CALL [11] {
              function: optional.none
              args: {
              }
            }
            IDENT [12] {
              name: @index0
            }
            IDENT [13] {
              name: @index0
            }
          }
          optional_indices: [0]
        }
        LIST [14] {
          elements: {
            CONSTANT [15] { value: 10 }
            IDENT [16] {
              name: @index1
            }
            IDENT [17] {
              name: @index1
            }
          }
        }
      }
    }
  }
}
Test case: OPTIONAL_MAP
Source: {?'hello': optional.of('hello')}['hello'] + {?'hello': optional.of('hello')}['hello'] == 'hellohello'
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _[_]
          args: {
            MAP [4] {
              MAP_ENTRY [5] {
                key: {
                  CONSTANT [6] { value: "hello" }
                }
                optional_entry: true
                value: {
                  CALL [7] {
                    function: optional.of
                    args: {
                      CONSTANT [8] { value: "hello" }
                    }
                  }
                }
              }
            }
            CONSTANT [9] { value: "hello" }
          }
        }
      }
    }
    CALL [10] {
      function: _==_
      args: {
        CALL [11] {
          function: _+_
          args: {
            IDENT [12] {
              name: @index0
            }
            IDENT [13] {
              name: @index0
            }
          }
        }
        CONSTANT [14] { value: "hellohello" }
      }
    }
  }
}
Test case: OPTIONAL_MAP_CHAINED
Source: {?'key': optional.of('test')}[?'bogus'].or({'key': 'test'}[?'bogus']).orValue({'key': 'test'}['key']) == 'test'
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        MAP [3] {
          MAP_ENTRY [4] {
            key: {
              CONSTANT [5] { value: "key" }
            }
            value: {
              CONSTANT [6] { value: "test" }
            }
          }
        }
      }
    }
    CALL [7] {
      function: _==_
      args: {
        CALL [8] {
          function: orValue
          target: {
            CALL [9] {
              function: or
              target: {
                CALL [10] {
                  function: _[?_]
                  args: {
                    MAP [11] {
                      MAP_ENTRY [12] {
                        key: {
                          CONSTANT [13] { value: "key" }
                        }
                        optional_entry: true
                        value: {
                          CALL [14] {
                            function: optional.of
                            args: {
                              CONSTANT [15] { value: "test" }
                            }
                          }
                        }
                      }
                    }
                    CONSTANT [16] { value: "bogus" }
                  }
                }
              }
              args: {
                CALL [17] {
                  function: _[?_]
                  args: {
                    IDENT [18] {
                      name: @index0
                    }
                    CONSTANT [19] { value: "bogus" }
                  }
                }
              }
            }
          }
          args: {
            CALL [20] {
              function: _[_]
              args: {
                IDENT [21] {
                  name: @index0
                }
                CONSTANT [22] { value: "key" }
              }
            }
          }
        }
        CONSTANT [23] { value: "test" }
      }
    }
  }
}
Test case: OPTIONAL_MESSAGE
Source: TestAllTypes{?single_int64: optional.ofNonZeroValue(1), ?single_int32: optional.of(4)}.single_int32 + TestAllTypes{?single_int64: optional.ofNonZeroValue(1), ?single_int32: optional.of(4)}.single_int64 == 5
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        STRUCT [3] {
          name: TestAllTypes
          entries: {
            ENTRY [4] {
              field_key: single_int64
              optional_entry: true
              value: {
                CALL [5] {
                  function: optional.ofNonZeroValue
                  args: {
                    CONSTANT [6] { value: 1 }
                  }
                }
              }
            }
            ENTRY [7] {
              field_key: single_int32
              optional_entry: true
              value: {
                CALL [8] {
                  function: optional.of
                  args: {
                    CONSTANT [9] { value: 4 }
                  }
                }
              }
            }
          }
        }
      }
    }
    CALL [10] {
      function: _==_
      args: {
        CALL [11] {
          function: _+_
          args: {
            SELECT [12] {
              IDENT [13] {
                name: @index0
              }.single_int32
            }
            SELECT [14] {
              IDENT [15] {
                name: @index0
              }.single_int64
            }
          }
        }
        CONSTANT [16] { value: 5 }
      }
    }
  }
}
Test case: CALL
Source: ('h' + 'e' + 'l' + 'l' + 'o' + ' world').matches('h' + 'e' + 'l' + 'l' + 'o')
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: _+_
          args: {
            CALL [4] {
              function: _+_
              args: {
                CALL [5] {
                  function: _+_
                  args: {
                    CALL [6] {
                      function: _+_
                      args: {
                        CONSTANT [7] { value: "h" }
                        CONSTANT [8] { value: "e" }
                      }
                    }
                    CONSTANT [9] { value: "l" }
                  }
                }
                CONSTANT [10] { value: "l" }
              }
            }
            CONSTANT [11] { value: "o" }
          }
        }
      }
    }
    CALL [12] {
      function: matches
      target: {
        CALL [13] {
          function: _+_
          args: {
            IDENT [14] {
              name: @index0
            }
            CONSTANT [15] { value: " world" }
          }
        }
      }
      args: {
        IDENT [16] {
          name: @index0
        }
      }
    }
  }
}
Test case: CALL_ARGUMENT_NESTED_NO_COMMON_SUBEXPR
Source: 'hello world'.matches('h' + 'e' + 'l' + 'l' + 'o')
=====>
CALL [2] {
  function: matches
  target: {
    CONSTANT [1] { value: "hello world" }
  }
  args: {
    CALL [10] {
      function: _+_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [6] {
              function: _+_
              args: {
                CALL [4] {
                  function: _+_
                  args: {
                    CONSTANT [3] { value: "h" }
                    CONSTANT [5] { value: "e" }
                  }
                }
                CONSTANT [7] { value: "l" }
              }
            }
            CONSTANT [9] { value: "l" }
          }
        }
        CONSTANT [11] { value: "o" }
      }
    }
  }
}
Test case: CALL_TARGET_NESTED_NO_COMMON_SUBEXPR
Source: ('h' + 'e' + 'l' + 'l' + 'o' + ' world').matches('hello')
=====>
CALL [12] {
  function: matches
  target: {
    CALL [10] {
      function: _+_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [6] {
              function: _+_
              args: {
                CALL [4] {
                  function: _+_
                  args: {
                    CALL [2] {
                      function: _+_
                      args: {
                        CONSTANT [1] { value: "h" }
                        CONSTANT [3] { value: "e" }
                      }
                    }
                    CONSTANT [5] { value: "l" }
                  }
                }
                CONSTANT [7] { value: "l" }
              }
            }
            CONSTANT [9] { value: "o" }
          }
        }
        CONSTANT [11] { value: " world" }
      }
    }
  }
  args: {
    CONSTANT [13] { value: "hello" }
  }
}
Test case: CALL_BOTH_ARGUMENT_TARGET_NESTED_NO_COMMON_SUBEXPR
Source: ('h' + 'e' + 'l' + 'l' + 'o' + ' world').matches('w' + 'o' + 'r' + 'l' + 'd')
=====>
CALL [12] {
  function: matches
  target: {
    CALL [10] {
      function: _+_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [6] {
              function: _+_
              args: {
                CALL [4] {
                  function: _+_
                  args: {
                    CALL [2] {
                      function: _+_
                      args: {
                        CONSTANT [1] { value: "h" }
                        CONSTANT [3] { value: "e" }
                      }
                    }
                    CONSTANT [5] { value: "l" }
                  }
                }
                CONSTANT [7] { value: "l" }
              }
            }
            CONSTANT [9] { value: "o" }
          }
        }
        CONSTANT [11] { value: " world" }
      }
    }
  }
  args: {
    CALL [20] {
      function: _+_
      args: {
        CALL [18] {
          function: _+_
          args: {
            CALL [16] {
              function: _+_
              args: {
                CALL [14] {
                  function: _+_
                  args: {
                    CONSTANT [13] { value: "w" }
                    CONSTANT [15] { value: "o" }
                  }
                }
                CONSTANT [17] { value: "r" }
              }
            }
            CONSTANT [19] { value: "l" }
          }
        }
        CONSTANT [21] { value: "d" }
      }
    }
  }
}
Test case: CUSTOM_FUNCTION_INELIMINABLE
Source: non_pure_custom_func(msg.oneof_type.payload.single_int64) + non_pure_custom_func(msg.oneof_type.payload.single_int32) + non_pure_custom_func(msg.oneof_type.payload.single_int64) + non_pure_custom_func(msg.single_int64)
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        SELECT [3] {
          SELECT [4] {
            SELECT [5] {
              IDENT [6] {
                name: msg
              }.oneof_type
            }.payload
          }.single_int64
        }
      }
    }
    CALL [7] {
      function: _+_
      args: {
        CALL [8] {
          function: _+_
          args: {
            CALL [9] {
              function: _+_
              args: {
                CALL [10] {
                  function: non_pure_custom_func
                  args: {
                    IDENT [11] {
                      name: @index0
                    }
                  }
                }
                CALL [12] {
                  function: non_pure_custom_func
                  args: {
                    SELECT [13] {
                      SELECT [14] {
                        SELECT [15] {
                          IDENT [16] {
                            name: msg
                          }.oneof_type
                        }.payload
                      }.single_int32
                    }
                  }
                }
              }
            }
            CALL [17] {
              function: non_pure_custom_func
              args: {
                IDENT [18] {
                  name: @index0
                }
              }
            }
          }
        }
        CALL [19] {
          function: non_pure_custom_func
          args: {
            SELECT [20] {
              IDENT [21] {
                name: msg
              }.single_int64
            }
          }
        }
      }
    }
  }
}
Test case: CUSTOM_FUNCTION_ELIMINABLE
Source: pure_custom_func(msg.oneof_type.payload.single_int64) + pure_custom_func(msg.oneof_type.payload.single_int32) + pure_custom_func(msg.oneof_type.payload.single_int64) + pure_custom_func(msg.single_int64)
=====>
CALL [1] {
  function: cel.@block
  args: {
    LIST [2] {
      elements: {
        CALL [3] {
          function: pure_custom_func
          args: {
            SELECT [4] {
              SELECT [5] {
                SELECT [6] {
                  IDENT [7] {
                    name: msg
                  }.oneof_type
                }.payload
              }.single_int64
            }
          }
        }
        CALL [8] {
          function: _+_
          args: {
            CALL [9] {
              function: _+_
              args: {
                IDENT [10] {
                  name: @index0
                }
                CALL [11] {
                  function: pure_custom_func
                  args: {
                    SELECT [12] {
                      SELECT [13] {
                        SELECT [14] {
                          IDENT [15] {
                            name: msg
                          }.oneof_type
                        }.payload
                      }.single_int32
                    }
                  }
                }
              }
            }
            IDENT [16] {
              name: @index0
            }
          }
        }
      }
    }
    CALL [17] {
      function: _+_
      args: {
        IDENT [18] {
          name: @index1
        }
        CALL [19] {
          function: pure_custom_func
          args: {
            SELECT [20] {
              IDENT [21] {
                name: msg
              }.single_int64
            }
          }
        }
      }
    }
  }
}