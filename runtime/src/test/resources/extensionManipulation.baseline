Source: [y.hasI(), y.getI() == 200, !n.hasI(), n.getI() == 0,
 n.assignI(43).hasI(), n.assignI(42).getI() == 42,
 y.assignI(99).hasI(), y.assignI(31).getI() == 31,
 !n.clearI().hasI(), !y.clearI().hasI(), y.clearI().getI() == 0,
 y.hasN(), y.getN().getI() == 0, !y.getN().hasN(), y.getN().getN().getI() == 0,
 !n.hasN(), n.assignN(y).getN().hasN(),
 !n.clearN().hasN(), !y.clearN().hasN(),
 n.getR() == [], y.getR().map(h, h.single_string) == ["alpha", "beta"],
 n.assignR(["a", "b"].map(s, TestAllTypes{single_string:s})).getR().map(h, h.single_string) == ["a", "b"],
 y.clearR().getR() == []]
declare y {
  value cel.expr.conformance.proto2.TestAllTypes
}
declare n {
  value cel.expr.conformance.proto2.TestAllTypes
}
declare getI {
  function getI cel.expr.conformance.proto2.TestAllTypes.() -> int
}
declare hasI {
  function hasI cel.expr.conformance.proto2.TestAllTypes.() -> bool
}
declare assignI {
  function assignI cel.expr.conformance.proto2.TestAllTypes.(int) -> cel.expr.conformance.proto2.TestAllTypes
}
declare clearI {
  function clearI cel.expr.conformance.proto2.TestAllTypes.() -> cel.expr.conformance.proto2.TestAllTypes
}
declare getN {
  function getN cel.expr.conformance.proto2.TestAllTypes.() -> cel.expr.conformance.proto2.TestAllTypes
}
declare hasN {
  function hasN cel.expr.conformance.proto2.TestAllTypes.() -> bool
}
declare assignN {
  function assignN cel.expr.conformance.proto2.TestAllTypes.(cel.expr.conformance.proto2.TestAllTypes) -> cel.expr.conformance.proto2.TestAllTypes
}
declare clearN {
  function clearN cel.expr.conformance.proto2.TestAllTypes.() -> cel.expr.conformance.proto2.TestAllTypes
}
declare getR {
  function getR cel.expr.conformance.proto2.TestAllTypes.() -> list(cel.expr.conformance.proto2.TestAllTypes)
}
declare assignR {
  function assignR cel.expr.conformance.proto2.TestAllTypes.(list(cel.expr.conformance.proto2.TestAllTypes)) -> cel.expr.conformance.proto2.TestAllTypes
}
declare clearR {
  function clearR cel.expr.conformance.proto2.TestAllTypes.() -> cel.expr.conformance.proto2.TestAllTypes
}
=====>
bindings: {y=single_int32: 100
[cel.expr.conformance.proto2.int32_ext]: 200
[cel.expr.conformance.proto2.nested_ext] {
  single_int32: 50
}
[cel.expr.conformance.proto2.repeated_test_all_types] {
  single_string: "alpha"
}
[cel.expr.conformance.proto2.repeated_test_all_types] {
  single_string: "alpha"
}
, n=single_int32: 50
}
result:   [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true]
