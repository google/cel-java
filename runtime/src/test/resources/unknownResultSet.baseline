Source: x.single_int32 == 1 && true
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: x.single_int32 == 1 && false
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   false

Source: x.single_int32 == 1 && x.single_int64 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
  exprs: 6
}


Source: x.single_int32 == 1 && x.single_timestamp <= timestamp("bad timestamp string")
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: true && x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: false && x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   false

Source: x.single_timestamp <= timestamp("bad timestamp string") && x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 7
}


Source: x.single_timestamp <= timestamp("bad timestamp string") && x.single_timestamp > timestamp("another bad timestamp string")
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
error:    evaluation error: Failed to parse timestamp: invalid timestamp "bad timestamp string"
error_code:    BAD_FORMAT

Source: x.single_int32 == 1 || x.single_string == "test"
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
  exprs: 6
}


Source: x.single_int32 == 1 || x.single_string != "test"
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
  exprs: 6
}


Source: x.single_int32 == 1 || x.single_int64 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
  exprs: 6
}


Source: x.single_int32 == 1 || x.single_timestamp <= timestamp("bad timestamp string")
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: true || x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   true

Source: false || x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: x.single_timestamp <= timestamp("bad timestamp string") || x.single_int32 == 1
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
result:   unknown {
  exprs: 7
}


Source: x.single_timestamp <= timestamp("bad timestamp string") || x.single_timestamp > timestamp("another bad timestamp string")
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {}
error:    evaluation error: Failed to parse timestamp: invalid timestamp "bad timestamp string"
error_code:    BAD_FORMAT

Source: x.single_int32.f(1)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: 1.f(x.single_int32)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: x.single_int64.f(x.single_int32)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
  exprs: 4
}


Source: x
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {y=single_string: "test"
single_timestamp {
  seconds: 15
}
}
result:   unknown {
  exprs: 1
}


Source: x
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {x=unknown {
}
}
result:   unknown {
}


Source: x.map_int32_int64.map(x, x > 0, x + 1)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: [0, 2, 4].exists(z, z == 2 || z == x.single_int32)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   true

Source: [0, 2, 4].exists(z, z == x.single_int32)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 9
}


Source: [0, 2, 4].exists_one(z, z == 0 || (z == 2 && z == x.single_int32) || (z == 4 && z == x.single_int64))
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 26
}


Source: [0, 2].all(z, z == 2 || z == x.single_int32)
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 12
}


Source: [0, 2, 4].filter(z, z == 0 || (z == 2 && z == x.single_int32) || (z == 4 && z == x.single_int64))
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 26
}


Source: [0, 2, 4].map(z, z == 0 || (z == 2 && z == x.single_int32) || (z == 4 && z == x.single_int64))
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 17
  exprs: 26
}


Source: x.single_int32 == 1 ? 1 : 2
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: true ? x.single_int32 : 2
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: true ? 1 : x.single_int32
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   1

Source: false ? x.single_int32 : 2
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   2

Source: false ? 1 : x.single_int32
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 4
}


Source: x.single_int64 == 1 ? x.single_int32 : x.single_int32
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 1
}


Source: {x.single_int32: 2, 3: 4}
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: {1: x.single_int32, 3: 4}
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 4
}


Source: {1: x.single_int32, x.single_int64: 4}
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 4
  exprs: 7
}


Source: [1, x.single_int32, 3, 4]
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: [1, x.single_int32, x.single_int64, 4]
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
  exprs: 5
}


Source: TestAllTypes{single_int32: x.single_int32}.single_int32 == 2
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
}


Source: TestAllTypes{single_int32: x.single_int32, single_int64: x.single_int64}
declare x {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare f {
  function f int.(int) -> bool
}
=====>
bindings: {}
result:   unknown {
  exprs: 3
  exprs: 6
}
