Source: ([1, 2, 3] + x.repeated_int32)[3] == 4
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
=====>
bindings: {x=repeated_int32: 4
}
result:   true

Source: !(y in [1, 2, 3]) && y in [4, 5, 6]
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
=====>
bindings: {y=4}
result:   true

Source: TestAllTypes{repeated_int32: [1,2]}.repeated_int32[1] == 2
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
=====>
bindings: {}
result:   true

Source: 1 in TestAllTypes{repeated_int32: [1,2]}.repeated_int32
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
=====>
bindings: {}
result:   true

Source: !(4 in [1, 2, 3]) && 1 in [1, 2, 3]
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
=====>
bindings: {}
result:   true

Source: !(4 in list) && 1 in list
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
declare list {
  value list(int)
}
=====>
bindings: {list=[1, 2, 3]}
result:   true

Source: !(y in list)
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
declare list {
  value list(int)
}
=====>
bindings: {y=4, list=[1, 2, 3]}
result:   true

Source: y in list
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
declare list {
  value list(int)
}
=====>
bindings: {y=1, list=[1, 2, 3]}
result:   true

Source: list[3]
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare y {
  value int
}
declare list {
  value list(int)
}
=====>
bindings: {y=1, list=[1, 2, 3]}
error:    evaluation error: Index out of bounds: 3
error_code:    INDEX_OUT_OF_BOUNDS
