Source: x.single_value
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  bool_value: true
}
}
result:   true

Source: x.single_value == double(1)
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  number_value: 1.0
}
}
result:   true

Source: x.single_value == 1.1
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  number_value: 1.1
}
}
result:   true

Source: x.single_value == null
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  null_value: NULL_VALUE
}
}
result:   true

Source: x.single_value == 'hello'
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  string_value: "hello"
}
}
result:   true

Source: x.single_value[0] == [['hello'], -1.1][0]
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_value {
  list_value {
    values {
      list_value {
        values {
          string_value: "hello"
        }
      }
    }
    values {
      number_value: -1.1
    }
  }
}
}
result:   true

Source: x.single_struct.num == {'str': ['hello'], 'num': -1.1}['num']
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {x=single_struct {
  fields {
    key: "num"
    value {
      number_value: -1.1
    }
  }
  fields {
    key: "str"
    value {
      list_value {
        values {
          string_value: "hello"
        }
      }
    }
  }
}
}
result:   true

Source: TestAllTypes{single_struct: TestAllTypes{single_value: {'str': ['hello']}}.single_value}
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
=====>
bindings: {}
result:   single_struct {
  fields {
    key: "str"
    value {
      list_value {
        values {
          string_value: "hello"
        }
      }
    }
  }
}


Source: pair(x.single_struct.str[0], 'val')
declare x {
  value cel.expr.conformance.proto3.TestAllTypes
}
declare pair {
  function pair (string, string) -> dyn
}
=====>
bindings: {x=single_struct {
  fields {
    key: "num"
    value {
      number_value: -1.1
    }
  }
  fields {
    key: "str"
    value {
      list_value {
        values {
          string_value: "hello"
        }
      }
    }
  }
}
}
result:   {hello=val}

